[
    {
        "uri": "/docs/chaingear/changelog/",
        "title": "",
        "description": "",
        "content": " Change Log Unreleased Full Changelog\nClosed issues:\n Create awesome gif for readme #1067 Consensus around basic chaingear utility in Cyb #1066 Remove linter warnings from console #1057 New fee splitting contracts #1055 Check and update cross contract interfaces for contracts #1054 Rewrite beneficiary contract frontend interfaces #1053 Root registry structure #1047 Make .chaingear frontend work with Main Ethereum network #1044 Release first iteration of chaingear paper #1030 Master audit #1001 Deploy to mainnet #997 Decreasing gas consumption, audit #993 0.1 chaingear release #974  Merged pull requests:\n edit docs org and config.yml in CI #1068 (SaveTheAles) UPD CI job docs upd #1033 (SaveTheAles)  0.1.0 (2019-01-28) Closed issues:\n Verification of databases on Etherscan #1046 Add favicon for chaingear landing #1045 Create components for chaingear #1043 Polish design of new chaingear #1042 New registry UI #1041 Delete registry only when it is paused #1040 Multistep registry creation on UI #1039 Save registry ABI into the blockchain. Категарически #1038 Signing account do not chooses properly #1037 ABI do not resolve given ipfs hash #1036 Cannot add records if registry fee has been changed from non zero ETH #1035 Add registryID as field of registry contract #1034 Add stand-alone initialization of schema to registry #1031 Update UI for chaingear app #1029 Add shares logic for registry #1027 Add entry creation policy logic to registry #1025 Split registry creation and deploy in 3 stagess #1024 Sprint 20 report #1023 Upgrade migration for async/await and add migrations for schemas #1020 Fix burning/deletion of token/entry in chaingear/registry contracts #1019 Upgrade docs for 0.1 Euler release #1018 Upgrade application with more contracts data #1017 Fix application logic for most compatibility with contracts #1016 Refactoring of chaingear\u0026rsquo;s web3 app #1015 Gitcoin minutes first post #1014 Upgrade project after code review #1012 Upgrade project after code review #1011 Update Chaingear UI concepts #1008 Prepare project to audit #996 Security audit of chaingear\u0026rsquo;s contracts #994 Random tests failing with raw truffle test command #992 Update NatSpec in all contracts #990 Allow change of Registry name #989 Create issues for community in gitcoin #988 Add EntryCore example with field uniqueness check #987 Check funds before deleting entry in Registry #986 Display registry symbol in registry list #985 Chaingear kovan unstable deployment #984 Publish sprint 12 Changelog #983 Integrate initial chaingear app with cyb #982 Review chainger initial release by ha #981 Draw logo and patern for Chaingear #979 Upgrade web3 app with initial release #978 Create a landing page for chaingear project #977 Integrate Etherscan verification #975 First side code review of chaingear #972 Integration of whitelist entry policy to Registry #971 Integration of IPFSeable to Registry #970 Integration of IPFSeable to Chaingear #969 get contracts for address #966 unical record field in array #965 Deploy chaingear contracts to Kovan testnet #962 Add Changelog for Sprint 9 #961 Initial release of chaingear #960 Initial gas tests for Chaingear/Rs and evaluation of cost #959 Refactoring for Chaingear/Rs #958 Improve access logic for Registry #957 Improve access logic for Chaingear #956 Write basic tests for Chaingear #955 Write basic tests for Registry #954 Perfomance testing scenario for cyberd #953 Perfomance testing of PoA networks #952 Update Library #951 Distinct field for registry constructor as option #948 Implement funding for chaingear/Rs #947 Add entries funding to registries base #946 Implement 721\u0026rsquo;s cross-integration between chaingear and registries #945 Integrate ERC721 to Registry base #944 Integrate ERC721 to chaingear #943 Provide documentation for Chaingear contracts in NatSpec #942 Provide documentation for Registry contracts in NatSpec #941 Reduce js file size #940 Code generation base validation #939 Save abi to ipfs node not only local cache #938 Setup truffle\u0026rsquo;s documentation for chaingear/Rs #937 Develop App Registry for CYB #936 Research on ERC 721 integration to chaingear/Rs entries #935 Improve docs for Chaingear project #934 Setup Registry with basic logic #933 Add registration to RR for basic logic of Registry contract base #932 Setup documentation for Registry and Entries CRUD pipeline #931 Setup chaingear (RoR) contract with basic logic #930 Migrate old chaingear to a new project #927 Change Button Placement (Put to the Header) #919 Integrate with Etherscan #916 Create decentralized data storage #914 Develop new frontend #913 Develop new centralized data storage #912 Finalize data structure #911 Finalize application form development #910 Develop an administration interface #909 Invalid toml file #884 Invalid toml file #883 Setup CI with data validation #871 Invalid toml file #859 Invalid toml file #858 Invalid toml file #857 Invalid toml file #856 Invalid toml file #855 Invalid toml file #854 Invalid toml file #853 Invalid toml file #852 Invalid toml file #848 Invalid toml file #812 Invalid toml file #811 Initial version of registries #792 Invalid toml file #783 Invalid toml file #782 Invalid toml file #781 Invalid toml file #780 Invalid toml file #779 Invalid toml file #778 Invalid toml file #777 http://toastycoin.com/ #776 https://www.citadel.ink/ #775 https://cyber.fund/system/Oracles_Network #760 omega.one - 2018 #742 Nebulas - TBA #740 https://cyber.fund/system/Solar_Bankers #734 https://github.com/TokenBnk/ #733 Solarbankers - 21\u0026frasl;11 #732 Tokenbnk - 30\u0026frasl;11 #731 Metronome.io #730 https://bitcoingold.org/ #729 MakerDAO - Dec 17 #718 Truebit #717 https://www.sweetbridge.com - 17.11 #714 Metronome - March 2018 #713 http://fragmented.world - TBA #712 http://quickblocks.io - TBA #711 http://lightstreams.network/ - Q2 2018 #710 https://wepower.network/ #709 https://dharma.io ICO date TBA #708 Pre-Sale add please from 30th October to 3rd November #705 Blockstack - 13 Nov - open-source, contract to come #685 Mobius - 8 Nov Open source/contract to come #684 FundRequest - 20 Nov #683 Add navigation to Active, Upcoming, Anticipated and Successful on Radar page #682 Resolve why some projects are displayed twice on Radar #681 Find transformation manager for Chaingear #674 Ocean protocol #660 Develop scripts for export Chaingear to Google Spreadsheet #637 Move data from Google Spreadsheet to Chaingear #636 Kill submit form on site #635 Monthly report \u0026ldquo;Decrypted\u0026rdquo; or \u0026ldquo;Unfiated\u0026rdquo; #634 Raiden Network - 18 Oct #614 Andaction #610 True Flip Markets #603 EAS #601 Publica - 25 Oct #580 Quantstamp - 12\u0026frasl;11 #579 True Flip #529 Remove all ICO data for Contingency on website #511 Raiden Network Oct - ? #510 FansUnite #509 PROPS project - 20 Nov #508 Leverj - 7 Nov - Open source/contract to come #507 https://decent.ch/ #506 ICON 20 Oct #505 Livepeer #504 https://protos.tokenhub.com/ 25 Sept pre-ICO / 17 Oct ICO #503 https://biocoin.bio/ru 9 Nov #502 Climatecoin 1 Nov #501 Kyber Network ICO over #483 Verif-y - 25 Oct #481 Brickblock 31 Oct #476 ChainLink #475 Solidified #472 Moneypot 17 Sept #471 Zephyr 6 Oct #470 Correct ICO time for Paragon #466 WePower Network - ICO planned on February 1st, 2018 #457 Render 5 Oct #456 Mercury Protocol - 25 Oct - open code, contract to come soon #455 Zen Protocol #454 plasma.io #453 dharma.io - 2018 #452 WanChain 3 Oct #451 ChainLink 19 Sept #450 ties.network 21 Sept #449 Sweetbridge #448 Aventus - closed #447 DOVU.io #446 Airswap - 10 Oct - code partially closed #445 BitJob ICO ongoing #444 Graft.network #443 Gimli 18 Sept #442 The cyber Fund website does not display any changes #440 Starbase 27 Sept #435 Resolve comments to submissions #434 Grid+ / 30 Oct #433 FaceCoin #432 AirToken 19 Sept #428 Flovio #427 Goldmint 17 Sept #426 Atlant.io ongoing #425 Streamr - 12 Oct - code partially closed #424 Doc.ai 28 Sept #417 **https://databrokerdao.com/ 18 Sept pre-ICO #416 **swap.tech #415 Lendroid #414 Bloom #413 Etherparty 1 Oct #412 AutoNomic #411 Aidos Kunen #410 QRL #409 Metaverse #408 FunFair #407 Paragon 15 Sept #406 Zeppelin OS #405 Polkadot #404 https://neo.org/ #403 Aion #402 Filecoin #239 0x project #226 Migrate escrow and proof from Stats to escrow in Ballances #214 rexmls.com #213 Create google excel sheet with all tokens with their decimals #212 Move ICO Submit to ICO Stats #203 Concept first post-ICO report #201 propy.com #200 coindash.io #198 MyBit #197 district0x #196 Выборка проектов для отчета за июнь #195 Update Post-ICO data #183 DAO Casino #176 EOS #167 Finish Aeternity Crowdsale #165 Tezos #164 AdChain #163 OmiseGo #162 Civic #158 Status #138 SONM #137 Bancor draft #136 Cofound.it #122 Starbase #117 Final fraft Starbase #108 BAT #103 Pre-draft BAT #102 Setup link checker #98 Add data label #97 https://cyber.fund/EMC #96 Bancor #94 Pre-draft Bancor #93 Mysterium #92 Непонятно как они оказались в Радаре (внизу) #89 Fix first price and date #74 add missing icons #68 crowdsale times #46 Fix incorrect Storj cap calculation #42 Quality report calculation #32 Move aliases.CurrencyName to a token.token_name #31 Links for Stellar #29 Clean up API and source data #28 Clear garbage systems #27 Fix incorrect Cap due to wrong supply #26 Chaingear Init #25 Sync users with dev #24 Autoupdated assets don\u0026rsquo;t star system #23 How to add tokenless protocols? #22 List of systems to rename #21 Change address/path for generated API #20 Regeps for systems in Satoshi•Fund #16 Fix currencies names #15 BitBTC icon #14 Add icons for BitAssets #13 Blockchain IDs for rated systems #12 Chaingear landing #11 Chaingear docs #10 Fix rating for ✪✪ systems #9 Reconsile Coinmarketcap names #8 Rename Objects and Arrays #7 Update rating #6 Merge dublicates #4 One chain - one folder #3 Switch to TOML #2  Merged pull requests:\n Chaingear\u0026rsquo;s EVM 0.1 Euler Release #1056 (litvintech) Rebuild chaingear #1021 (litvintech) UPD config.yml knowledge -\u0026gt; wiki #1013 (SaveTheAles) Review by anton #1009 (AnthonyAkentiev) Update landing according to new design #1007 (SaveTheAles) landing remaking #1006 (SaveTheAles) 996 refactoring before audit #1004 (litvintech) remove debugger #1003 (vstavetski) 996 refactoring before audit #1002 (litvintech) fixes #992 #995 (rsercano) Setup landing page for Chaingear #991 (SaveTheAles) Initial release #980 (litvintech) Improved docs for chaingear #976 (litvintech) 954 basic tests for registry #968 (hleb-albau) NatSpec descriptions for .chaingear and .registry #967 (SaveTheAles) Chaingear and Registry tokenized linking #964 (litvintech) Add class diagramm of Chaingear.sol #950 (SaveTheAles) ENSF noties #949 (SaveTheAles) Update chaingear.json #929 (ninjascant) Add: Lightstreams #928 (ninjascant) Block #926 (ninjascant) Add: Marcelo #925 (ninjascant) Add: Kryll_io #924 (ninjascant) Update: KERBEROS #923 (ninjascant) Add: KERBEROS #922 (ninjascant) Add: Block #921 (ninjascant) Add: BharathTrade #920 (ninjascant) Add: OnLive #917 (ninjascant) Add: PlayBets #897 (goloschaingear) Add: Naviaddress #896 (goloschaingear) Update Dether.toml #892 (mohdether) Add: ADAMANT #890 (ninjascant) Add: Neunet #889 (ninjascant) Add: MyWish #888 (ninjascant) Add: MyTrackNet #887 (ninjascant) Add: Movement App #886 (ninjascant) Update: ATFS Project; convert to new data structure #885 (ninjascant) Add: MindSports #882 (ninjascant) Add: MediBloc #881 (ninjascant) Add: e-Chat ICO #880 (ninjascant) Add: Lockcoin #879 (ninjascant) Add: GraphGrail Ai #878 (ninjascant) Add: GOALBONANZA #877 (ninjascant) Add: DropDeck #876 (ninjascant) Fix headline #875 (ninjascant) Fix chaingear.json #874 (ninjascant) Add: VRTworld #873 (goloschaingear) Add CI and data validation #872 (abitrolly) Add: BlockNum #869 (goloschaingear) Update Adshares ICO end date #868 (jzemlo) Blockarray #867 (ninjascant) Update: BANKEX #866 (goloschaingear) Update: BANKEX #865 (goloschaingear) Add Karbo logo #860 (ninjascant) Add: TrakInvest #851 (goloschaingear) Update Cryptics.toml #850 (halsoi) Update Dether.toml #849 (mohdether) Add new data structure #847 (ninjascant) Add new structure template #846 (ninjascant) Add: new data structture template #845 (ninjascant) Add: TrakInvest #844 (goloschaingear) Add: MARK.SPACE #843 (ninjascant) Add: Legacy #842 (ninjascant) Add: Kr8os #841 (ninjascant) Add: JibrelNetwork #840 (ninjascant) Add: iungo #839 (ninjascant) Add: InsurePal #838 (ninjascant) Add: HOQU #837 (ninjascant) Add: GraftNetwork #836 (ninjascant) Add: DFS #835 (ninjascant) Add: DAXT #834 (ninjascant) Add: SOLA #833 (ninjascant) Add: DADI #832 (ninjascant) Add: CycloShieldCoin #831 (ninjascant) Add: Cryptopus #830 (ninjascant) Add: CryptoAlias #829 (ninjascant) Blockarray #828 (ninjascant) Blockarray #827 (ninjascant) Add: Chainium #825 (ninjascant) Add: Cardstack #824 (ninjascant) Add: Bottos #823 (ninjascant) Add: Blockmesh #822 (ninjascant) Add: Blocklancer #821 (ninjascant) Add: BankEx #820 (ninjascant) Add: ATFS Project #819 (ninjascant) Add: AdMine #818 (ninjascant) Add: Aditus #817 (ninjascant) Add: Karbo #816 (goloschaingear) Add: TradePlayz #815 (goloschaingear) Add: TokenGo #810 (goloschaingear) Add: DAXT #809 (goloschaingear) Add: RaidenNetwork #790 (goloschaingear) Add: DCX #785 (goloschaingear) Add: CLN #774 (ninjascant) Add: DCX #773 (ninjascant) Add: Volk #772 (ninjascant) Add: Polkadot #771 (goloschaingear) Change dates #770 (Bilous4singree) Add: xChange logo #769 (ninjascant) Add: xChange #768 (ninjascant) Add: xChange #767 (goloschaingear) BitClave TokenSale Update #766 (mike-tih) Add: TSSToken #765 (goloschaingear) Add: SophiaTX #763 (goloschaingear) Add: SMMarket #762 (goloschaingear) Add: ParetoNetwork #761 (goloschaingear) Update: chaingear.json #759 (ninjascant) Add: WePower #758 (ninjascant) Add Experty logo #757 (ninjascant) Update: chaingear.json #756 (ninjascant) Add: TokenBnk #755 (ninjascant) Update: chaingear.json #754 (ninjascant) Add: Game Machine #753 (ninjascant) Add: DaoPlayMarket 2.0 #752 (ninjascant) Add: Blockarray #751 (ninjascant) Update: chaingear.json #750 (Protectorofcode) Add: Expert #748 (goloschaingear) Add: Debitum #747 (ninjascant) Add: BitcoinGold #746 (ninjascant) Update: chaingear.json #744 (ninjascant) Update: chaingear.json #743 (ninjascant) Add: Neuromation #741 (goloschaingear) Add: Rentberry #739 (ninjascant) Add: RightMesh #738 (ninjascant) Add: SelfKey #737 (ninjascant) Add: StopTheFakes #736 (ninjascant) Add: VinChainToken #735 (ninjascant) Update: chaingear.json #728 (Protectorofcode) Update: chaingear.json #727 (Protectorofcode) Update: chaingear.json #726 (Protectorofcode) Update: chaingear.json #725 (Protectorofcode) Update: chaingear #724 (Protectorofcode) Update: chaingear.json #722 (Protectorofcode) Update Opporty.toml #721 (Protectorofcode) Add: wysToken #720 (ninjascant) Add: Bloom #719 (goloschaingear) Update: chaingear.json #716 (ninjascant) Add: NAU #715 (ninjascant) Update: chaingear.json #707 (ninjascant) Update: chaingear.json #706 (ninjascant) Add: Dogezer #704 (ninjascant) Add: BitClave #703 (ninjascant) Add: AppCoins #702 (ninjascant) Add: Blockstack #701 (ninjascant) Update: chaingear.json #700 (ninjascant) Update: chaingear #699 (Protectorofcode) Add: Confideal #695 (ninjascant) Update toml. #693 (Bilous4singree) Update: chaingear.son #692 (ninjascant) Rega #691 (ninjascant) Delete: Bitnation #690 (Protectorofcode) Update: Gizer #689 (Protectorofcode) Rega #688 (ninjascant) Rega #687 (ninjascant) Add: Leverj #686 (ninjascant) Add: FansUnite #680 (ninjascant) Add: IACCrowdsale #679 (ninjascant) Add: SimpleToken #678 (ninjascant) Add: MBCH #677 (ninjascant) Add: Universa #676 (ninjascant) Add: AntiBureaucracy #675 (ninjascant) Add: Lamden #673 (ninjascant) Add: Rega #672 (ninjascant) Update: chaingear.json #671 (ninjascant) Update: Polkadot #670 (ninjascant) Update: RaidenNetwork logo #669 (ninjascant) Update: chaingear.json #668 (Protectorofcode) Update: chaingear.json #667 (Protectorofcode) Update: chaingear.json #666 (Protectorofcode) Raiden2 #664 (ninjascant) Add: RaidenNetwork #662 (ninjascant) Add: E4ROW #661 (Protectorofcode) Add: chaingear.json #659 (Protectorofcode) Update Fidcom.toml #658 (Bolikus) Add: Sense #657 (ninjascant) Add: DalaToken #656 (ninjascant) Add: Prizm #655 (Protectorofcode) Add: Nimiq #654 (Protectorofcode) Add: Real #653 (Protectorofcode) Add: Propy #652 (Protectorofcode) Add: Qointum #651 (Protectorofcode) Update: chaingear.json #650 (Protectorofcode) Add: Equibit #649 (Protectorofcode) Add: Vega Fund #648 (Protectorofcode) Update: chaingear.json #647 (Protectorofcode) Add: Leviar Coin #646 (Protectorofcode) Add: TrueBit #645 (Protectorofcode) Add: Agrello #644 (Protectorofcode) Update: chaingear.json #643 (Protectorofcode) Update: chaingear.json #642 (Protectorofcode) Add: Dether #641 (Protectorofcode) Update: chaingear.json #639 (Protectorofcode) Update: chaingear.json #638 (Protectorofcode) Update: chaingear.json #633 (Protectorofcode) Update: ARToken #632 (Protectorofcode) Update: chaingear.json #631 (Protectorofcode) Add: ARToken #630 (Protectorofcode) Add: KredX #629 (ninjascant) Add: Gimli #628 (Protectorofcode) Add: Ties Network #627 (Protectorofcode) Update: chaingear.json #626 (Protectorofcode) Update: Wanchain #625 (Protectorofcode) Add: Chimaera #624 (ninjascant) Update: Brickblock #623 (Protectorofcode) Update: chaingear.json #622 (Protectorofcode) Add: Divi Project #621 (Protectorofcode) Add: Gizer #620 (Protectorofcode) Update: chaingear.json #619 (Protectorofcode) Update: chaingear.json #618 (Protectorofcode) Add: Enigma #617 (Protectorofcode) Update: chaingear.json #616 (Protectorofcode) Add: Lendroid #615 (Protectorofcode) Add: FortySevenBank #613 (ninjascant) Update: chaingear.json #612 (Protectorofcode) Add: Pangea #611 (ninjascant) Update: chaingear.json #608 (Protectorofcode) Add: HeroCoin #607 (Protectorofcode) Add: ARToken #606 (Protectorofcode) Update: chaingear.json #605 (Protectorofcode) Update: Mercury Protocol #604 (Protectorofcode) Add: Dream Team #602 (Protectorofcode) Update: DMarket #600 (Protectorofcode) Add: Gaze Coin #599 (Protectorofcode) Add: MatchPay #598 (Protectorofcode) Add: Ripio Credit Network #597 (Protectorofcode) Add: Jibrel Network #596 (Protectorofcode) Add: Stimus #595 (Protectorofcode) Update: chaingear.json #594 (Protectorofcode) Add: Dome Platform #593 (Protectorofcode) Add: Rhea #592 (Protectorofcode) Add: Genesis Vision #591 (Protectorofcode) Add: Opporty #590 (Protectorofcode) Update: chaingear.json #589 (Protectorofcode) Fix True Flip Lottery Markets #588 (gamedevsam) Update: chaingear.json #587 (Protectorofcode) Update: Jincor #586 (Protectorofcode) Update: chaingear.json #585 (Protectorofcode) Add: Crypto Improvement Fund #584 (Protectorofcode) Update: chaingear.json #583 (Protectorofcode) Add: Zenome #582 (Protectorofcode) Update Privatix.toml #581 (devalexandr) Update Crypto 20.toml #578 (skolobov) Update: chaingear.json #577 (Protectorofcode) Add: MingoCoin #576 (Protectorofcode) Add: BioPayCoin #575 (Protectorofcode) Add: Sparc #574 (Protectorofcode) Add: DarfChain #573 (Protectorofcode) Add: Harbor #572 (Protectorofcode) Add: Udiar #571 (Protectorofcode) Add: Quantstamp #570 (Protectorofcode) Add: Fidcom #569 (Protectorofcode) Update Papyrus.toml #568 (ashwets) Add: Databroker DAO #567 (Protectorofcode) Add: Dinnerful Network #566 (Protectorofcode) Add: TripAlly #565 (Protectorofcode) Add: Lescoin #564 (Protectorofcode) Add: Hirematch #563 (Protectorofcode) Update: chaingear.json #562 (Protectorofcode) Add: CoinDrive #561 (Protectorofcode) Add: Auctus #560 (Protectorofcode) Add: Snip #559 (Protectorofcode) Update: chaingear.json #558 (Protectorofcode) Add: Papyrus #557 (Protectorofcode) Add: CarTaxi #556 (Protectorofcode) Add: Crypto 20 #555 (Protectorofcode) Add: SRG-Play\u0026amp;Earn #554 (Protectorofcode) Update: chaingear.json #553 (Protectorofcode) Add: Hacken #552 (Protectorofcode) Add: DLS Academy #551 (Protectorofcode) Add: Snovio #550 (Protectorofcode) Add: Acebusters #549 (Protectorofcode) Add: Relest #548 (Protectorofcode) Add: Soma #547 (Protectorofcode) Add: Ethbet #546 (Protectorofcode) Add: Stash #545 (Protectorofcode) Add: Privatix #544 (Protectorofcode) Add: Etch #543 (Protectorofcode) Add: Galactikka #542 (Protectorofcode) Add: Icon #541 (Protectorofcode) Update: chaingear.json #540 (Protectorofcode) Update: chaingear.json #539 (Protectorofcode) Update: Aion #538 (Protectorofcode) Update: chaingear.json #537 (Protectorofcode) Add: Crypto.tickets #536 (Protectorofcode) Add: Polkadot #535 (Protectorofcode) Add: Wanchain #534 (Protectorofcode) Update: chaingear.json #533 (Protectorofcode) Update: True Flip Lottery #532 (Protectorofcode) Update: chaingear.json #531 (Protectorofcode) Add: True Flip Lottery #530 (Protectorofcode) Update: Brickblock #528 (Protectorofcode) Update: Etherparty #527 (Protectorofcode) Update: Chaingear.json #526 (Protectorofcode) Add: Zen Protocol #525 (Protectorofcode) Update: Kyber #524 (Protectorofcode) Add: Livepeer #523 (Protectorofcode) Add: Internxt #522 (Protectorofcode) Add: Evr #521 (Protectorofcode) Add: Cove Identity #520 (Protectorofcode) Add: Alloy #519 (Protectorofcode) Update: chaingear.json #518 (Protectorofcode) Update: Cointingency #517 (Protectorofcode) Update: chaingear.json #516 (Protectorofcode) Update: ChainLink #515 (Protectorofcode) Update: Cointingency #513 (Protectorofcode) Update: Contingency #512 (Protectorofcode) Update: chaingear.json #500 (Protectorofcode) Add: Atlant #499 (Protectorofcode) Update: Crystal Clear #498 (Protectorofcode) Update: chaingear.json #497 (Protectorofcode) Add: Verif-y #496 (Protectorofcode) Add: AirSwap #495 (Protectorofcode) Add: ChainLink #493 (Protectorofcode) Add: Grid+ #492 (Protectorofcode) Update: Metaverse #491 (Protectorofcode) Update: Aira #490 (Protectorofcode) Update: Omega One #489 (Protectorofcode) Update: Adchain #488 (Protectorofcode) Update: Loopring #487 (Protectorofcode) Add: Loopring #486 (Protectorofcode) Add: Mercury Protocol #485 (Protectorofcode) Update: chaingear.json #484 (Protectorofcode) Add: RockChain #482 (Protectorofcode) Add: Mito #480 (Protectorofcode) Add: Hagglin #479 (Protectorofcode) Add: Flip Coin #478 (Protectorofcode) Add: VoteCoin #477 (Protectorofcode) Update: chaingear.json #474 (Protectorofcode) Update: Electroneum #473 (Protectorofcode) Please change the end date to 2017 10 31. #469 (asanezz7) Update: chaingear.json #468 (Protectorofcode) Update: Paragon ICO #467 (Protectorofcode) Update: chaingear.json #465 (Protectorofcode) Update: AntShares -\u0026gt; NEO #464 (Protectorofcode) Add: Quantum Resistant Ledger #463 (Protectorofcode) Update: BOScoin #462 (Protectorofcode) Add: Metaverse #461 (Protectorofcode) Update: Aidos Kuneen #460 (Protectorofcode) Add: Aidos Kuneen #459 (Protectorofcode) Add: Aion #458 (Protectorofcode) Add: OpenZeppelin #441 (Protectorofcode) Add: FaceCoin #439 (Protectorofcode) Update: chaingear.json #438 (Protectorofcode) Update: Starbase #437 (Protectorofcode) Update: chaingear.json #436 (Protectorofcode) Update: FunFair #431 (Protectorofcode) Update: chaingear.json #430 (Protectorofcode) Add: Funfair #429 (Protectorofcode) Update: chaingear.json #423 (Protectorofcode) Add: Cash Poker Pro #422 (Protectorofcode) Add: EventChain #421 (Protectorofcode) Add: LAToken #420 (Protectorofcode) Add: Rouge Project #419 (Protectorofcode) Add: Detector #418 (Protectorofcode) Add: Spheris #401 (Protectorofcode) Add: Graft #400 (Protectorofcode) Add: DomRaider #399 (Protectorofcode) Add: Crystal Clear #398 (Protectorofcode) Add: Matryx #397 (Protectorofcode) Delete: Kin #396 (Protectorofcode) Add CombiCoin #395 (Protectorofcode) Add: Paragon #394 (Protectorofcode) Update: chaingear.json #392 (Protectorofcode) Update: Kin #391 (Protectorofcode) Update: chaingear.json #390 (Protectorofcode) Update: Decentraland #389 (Protectorofcode) Update: Filecoin #388 (Protectorofcode) Update: chaingear.json #387 (Protectorofcode) Update: chaingear.json #386 (Protectorofcode) Add: Urbit #385 (Protectorofcode) Add: Streamr #384 (Protectorofcode) Add: Solar Bankers #383 (Protectorofcode) Add: Oracles Network #382 (Protectorofcode) Add: Omega One #381 (Protectorofcode) Add: Kyber #380 (Protectorofcode) Add: Etherparty #379 (Protectorofcode) Add: Doc.ai #378 (Protectorofcode) Add: Aira #377 (Protectorofcode) Update: Adshares #376 (Protectorofcode) Update: Indorse #375 (Protectorofcode) Update: Cindicator #374 (Protectorofcode) Pylon Network #373 (klenergy) Update: chaingear.json #372 (Protectorofcode) Add: AirToken #371 (Protectorofcode) Add: Modum #370 (Protectorofcode) Update: Viberate #369 (Protectorofcode) Update: chaingear.json #368 (Protectorofcode) Update: Mybit #367 (Protectorofcode) Update: Rex #366 (Protectorofcode) Update: chaingear.json #365 (Protectorofcode) Update: Filecoin #364 (Protectorofcode) Update: Dimcoin #363 (Protectorofcode) Update: Presearch #362 (Protectorofcode) Update: Jincor #361 (Protectorofcode) Update: Vibe #360 (Protectorofcode) Update: Stable #359 (Protectorofcode) Update: Everex #358 (Protectorofcode) Update: Enjin Coin #357 (Protectorofcode) Update: Tieron #356 (Protectorofcode) Update: chaingear.json #355 (Protectorofcode) Update: Indorse #354 (Protectorofcode) Update: chaingear.json #353 (Protectorofcode) Update: Gilgam #352 (Protectorofcode) Add: TenX #351 (Protectorofcode) Add: Stox #350 (Protectorofcode) Add: Pillar #349 (Protectorofcode) Add: Opus #348 (Protectorofcode) Add: OpenAnx #347 (Protectorofcode) Add: Make It Viral #346 (Protectorofcode) Update: IO Coin #345 (Protectorofcode) Add: Digital Developers Fund #344 (Protectorofcode) Add: Decentraland #343 (Protectorofcode) Add: Crypviser #342 (Protectorofcode) Add: Bitjob #341 (Protectorofcode) Add: Asch #340 (Protectorofcode) Add: adToken #339 (Protectorofcode) Add: AdEx #338 (Protectorofcode) Add: Disledger #337 (Protectorofcode) Update: chaingear.js #336 (Protectorofcode) Update: 0x #335 (Protectorofcode) Update: chaingear.json #334 (Protectorofcode) Add: Umbrella Coin #333 (Protectorofcode) Add: Trackr #332 (Protectorofcode) Update: Solar DAO #331 (Protectorofcode) Add: Solar DAO #330 (Protectorofcode) Add: Slot N Slot #329 (Protectorofcode) Add: Pylon Network #328 (Protectorofcode) Add: OpenZen #327 (Protectorofcode) Add: Neblio #326 (Protectorofcode) Add: Magos #325 (Protectorofcode) Add: Lordmancer #324 (Protectorofcode) Add: Lampix #323 (Protectorofcode) Add: Fijinto #322 (Protectorofcode) Add: Fluence #321 (Protectorofcode) Add: Electroneum #319 (Protectorofcode) Add: DMarket #318 (Protectorofcode) Add: Dimcoin #317 (Protectorofcode) Add: Crowdholding #316 (Protectorofcode) Add: Cindicator #315 (Protectorofcode) Add: aventus #314 (Protectorofcode) Add: Anryze #313 (Protectorofcode) Updating Indorse links \u0026amp; token sale details #310 (avadhootkulkarni) Update: chaingear.json #309 (Protectorofcode) Update: FileCoin #308 (Protectorofcode) Update: chaingear.json #307 (Protectorofcode) Update: Filecoin #306 (Protectorofcode) Update: chaingear.json #305 (Protectorofcode) Add: Spectiv #304 (Protectorofcode) Add: Presearch #303 (Protectorofcode) Add: Poet #302 (Protectorofcode) Add: Indorse #301 (Protectorofcode) Add: CoinDash #300 (Protectorofcode) Add: Adshares #299 (Protectorofcode) Add: 8 Curcuit Studios #298 (Protectorofcode) Update: chaingear.json #297 (Protectorofcode) Add: U.CASH #296 (Protectorofcode) Add: Silent Notary #295 (Protectorofcode) Add: MooseCoin #294 (Protectorofcode) Add: Kairos #293 (Protectorofcode) Add: Jincor #292 (Protectorofcode) Add: Gluon #291 (Protectorofcode) Add: DigiCoinMaker #290 (Protectorofcode) Add: Blocklancer #289 (Protectorofcode) Update: chaingear.json #288 (Protectorofcode) Update: Kickico #287 (Protectorofcode) Update: chaingear.json #286 (Protectorofcode) Update: Starbase #285 (Protectorofcode) Update: Starbase #284 (Protectorofcode) Update: 0x #283 (Protectorofcode) Add: Vibe Hub #282 (Protectorofcode) Add: Stable #281 (Protectorofcode) Add: Sift #280 (Protectorofcode) Add: Gamerbits #279 (Protectorofcode) Add: Coss #278 (Protectorofcode) Add: Centra #277 (Protectorofcode) Add: Bitsdigit #276 (Protectorofcode) We\u0026rsquo;ve updated some info. Please, update Kickico.toml #275 (KICKICOPR) Update: chaingear.json #274 (Protectorofcode) Update: Bitcoin Cash #273 (Protectorofcode) Update: chaingear.json #272 (Protectorofcode) Update: Bitcoin Cash #271 (Protectorofcode) Add: Bitcoin Cash #270 (Protectorofcode) Update: chaingear.json #269 (Protectorofcode) Update: Kuna #268 (Protectorofcode) Update: chaingear.json #267 (Protectorofcode) Cha #266 (Protectorofcode) Update: chaingear.json #264 (Protectorofcode) Update: Kuna #263 (Protectorofcode) Update: chaingear.json #262 (Protectorofcode) Update: Brickblock #261 (Protectorofcode) Add: Brickblock #260 (Protectorofcode) Add: Nimfamoney #259 (Protectorofcode) Add: Monkey Capital #258 (Protectorofcode) Add: Kuna #257 (Protectorofcode) Add: Enjin Coin #256 (Protectorofcode) Update: chaingear.js #255 (Protectorofcode) Update: chaingear.js #254 (Protectorofcode) Update: Kickico #253 (Protectorofcode) Update: Skycoin #251 (Protectorofcode) update logo skycoin #250 (Protectorofcode) Add: Prospectors #248 (Protectorofcode) Add: Nexxus Parthers #247 (Protectorofcode) Add: Embermine #246 (Protectorofcode) Add: BOScoin #245 (Protectorofcode) Add: Viberate #243 (Protectorofcode) Add: Kickico #242 (Protectorofcode) Update: Skycoin #238 (LucianMincu) Delete Scam: Kibo #237 (Protectorofcode) Add: FundYourSelf #236 (Protectorofcode) Add: Apptrade #235 (Protectorofcode) Add: Encryptotel #234 (Protectorofcode) Add: Veritaseum #233 (Protectorofcode) Add: ZrCoin #232 (Protectorofcode) Add: Chain of Points #231 (Protectorofcode) Add: Everex #230 (Protectorofcode) Add: Kibo Platform #229 (Protectorofcode) Update: Blockfreight #228 (Protectorofcode) Add: SlognCoin #227 (Protectorofcode) Add: Ziber #224 (Protectorofcode) Add: Tieron #223 (Protectorofcode) Add: Rex #222 (Protectorofcode) Add: 0x #221 (Protectorofcode) Add: Ethbits iTrade #220 (Protectorofcode) Add: Lunyr #219 (Protectorofcode) Add: CreativeChain #218 (Protectorofcode) Add: Suretly #217 (Protectorofcode) Update: Tezos #216 (Protectorofcode) Update: Mybit #215 (Protectorofcode) Update: TokenCard #211 (Protectorofcode) Update: Mysterium #210 (Protectorofcode) Update: Bat #209 (Protectorofcode) Update: Cofound #208 (Protectorofcode) Update: Bancor #207 (Protectorofcode) Update: Civic #206 (Protectorofcode) Update: Status #205 (Protectorofcode) Update: Mybit #202 (Protectorofcode) Add: District0x #199 (Protectorofcode) Add: Edgeless #194 (Protectorofcode) Add: LeoCoin #193 (Protectorofcode) Add: Ubiq #192 (Protectorofcode) Add: Numeraire #191 (Protectorofcode) Add: ZCoin #190 (Protectorofcode) Add: Nexus #189 (Protectorofcode) Add: MobileGo #188 (Protectorofcode) Add: MCAP #187 (Protectorofcode) Add: Komodo #186 (Protectorofcode) Update : Tezos #185 (Protectorofcode) Update: DaoCasino #184 (Protectorofcode) Update Time: Omise #182 (Protectorofcode) Update: Tezos #173 (Protectorofcode) Update: Sonm #170 (Protectorofcode) Add: Eos #168 (Protectorofcode) Update: Civic #166 (Protectorofcode) Update: Status #161 (Protectorofcode) Update fundrequest ico date #160 (karelstriegel) Update: Sonm #159 (Protectorofcode) Update: bancor #157 (Protectorofcode) Update: Bancor #156 (Protectorofcode) Update: Storjcoin X #155 (Protectorofcode) Add: OmiseGO #154 (Protectorofcode) Add: Populous #153 (Protectorofcode) Slight update to time (+4h) #152 (Razaberry) Update: Bancor #151 (Protectorofcode) Add: Kin #150 (Protectorofcode) Add: Bitquence #149 (Protectorofcode) Add: Monaco #148 (Protectorofcode) Update: Cofound #147 (Protectorofcode) Add: Ecobit #146 (Protectorofcode) Update: Aeternity #145 (Protectorofcode) Add: MyBit #144 (Protectorofcode) Update: Bat #143 (Protectorofcode) Add: 21Million #142 (Protectorofcode) Updated BNT sale date as per twitter annoucement #141 (Razaberry) Update: Bat #140 (Protectorofcode) Add: Cofound #139 (Protectorofcode) Update: DaoCasino #132 (Protectorofcode) Update: DaoCasino #130 (Protectorofcode) Add: Starbase #129 (Protectorofcode) Add: Civic #128 (Protectorofcode) New Bancor ICO start date: June 15 #127 (Razaberry) Add: Sonm #126 (Protectorofcode) Update: Voise #125 (Protectorofcode) Update: Tezos #124 (Protectorofcode) Add: Beth #123 (Protectorofcode) Add: Polybius #121 (Protectorofcode) Update: Status #120 (Protectorofcode) Update: Bancor #119 (Protectorofcode) Add: DCORP #118 (Protectorofcode) Add: Starta #116 (Protectorofcode) Add: Gilgam.es #115 (Protectorofcode) Add: Ark #114 (Protectorofcode) Add: Lykke #113 (Protectorofcode) Add: Bat #112 (Protectorofcode) Update: Mysterium #111 (Protectorofcode) Update: Storj #110 (Protectorofcode) Add: DaoCasino #109 (Protectorofcode) Fix link to Ripple web site #107 (abitrolly) Add: Mysterium #106 (Protectorofcode) Update: Storj #105 (Protectorofcode) BTCD - fix some links #99 (abitrolly) add bitworldvip #87 (bitworldvip) Update: Btsr, MassNetwork, Synereo, vDice #86 (Protectorofcode) add : Veltor, Voise, TokenCard #85 (Protectorofcode) add: Veltor #84 (Protectorofcode) Add: Tezos #83 (Protectorofcode) Bancor #82 (Protectorofcode) Add GBG #79 (xhipster) project update to seven blockchain systems #78 (agent725) adjusted end-date for fundraiser, and subtle changes #77 (agent725) Upcoming Musicoin Genesis #76 (musicoiner) Internet of Coins TOML specification #75 (agent725) Add FundRequest Dapp #73 (karelstriegel) logo change #72 (jamesgroton) Update vDice.toml #70 (jamesgroton) Inchain`s ICO dates changed #69 (trummax) Big mistakes about the starting date. #66 (zikilemini) Added Beyond The Void #64 (zikilemini) Total Supply Update #63 (chris4210) Update AntShares.toml from the Antshares Team #60 (PeterLinX) Update AntShares.toml from Antshares team #59 (DavidthePangwaer) Add files via upload #58 (JasonMcz) creating HONG profile #56 (hongcoiner) Add AntShares #55 (PeterLinX) Okcash Integration #54 (oktoshi) Add EnergyCoin #53 (coin1hub) Adding BTSR and ICOO assets #52 (OpenLedgerDev) Gh pages #51 (ElephantDevelopment) We are using Bitbucket instead of Github now. #50 (justindonnaruma) Add Rise.Vision Foundation #49 (justindonnaruma) Add MINEUM #48 (antho281) Dash Forum migrated to new link #47 (thelazier) fix link name, hashtag #45 (thelazier) Fix some consensus descriptions #43 (xhipster) Add a Gitter chat badge to README.md #41 (gitter-badger) Update: Consensus data #40 (xhipster) Update: Consensus data for 6 systems #39 (xhipster) Update: Consensus data for 10 systems #38 (xhipster) Update: Consensus data for 10 systems #37 (xhipster) Update: All consensus data #36 (xhipster) Update Dash Whitepaper #34 (thelazier) Update Dash.toml #33 (thelazier) Update github link and remove redundancies #30 (johansten) Update NuBits.toml #19 (CoinGame) Update NuShares.toml #18 (CoinGame) Link updates #17 (phideas) aliases #1 (ghost)  * This Change Log was automatically generated by github_changelog_generator\n"
    },
    {
        "uri": "/docs/chaingear/contributing/",
        "title": "",
        "description": "",
        "content": " Contributing list  @litvintech - contracts developer/maintainer @pechalka - web3 app developer/maintainer  "
    },
    {
        "uri": "/docs/chaingear/contracts/",
        "title": "",
        "description": "",
        "content": " Contracts Overview Design rationale Main design principle goes from ERC721 NFT tokenization of Databases (in Chaingear/Database of databases) and Entries (in custom user\u0026rsquo;s Database).\nIn reason of Databases tokenization in Chaingear which allows token holder acts as administrator of their Databases, Chaingear acts to Database as owner, which sets token holder as administrator on creation phase, changes administrator when holder transfers token to another user, and transfers ownership when user unregister Database in Chaingear, giving them full control to contract. Database deep-linked to Chaingear database token. In other words, token ownership means control of Database. Also, Chaingear supports multiple Database Builders (fabrics of databases of given type), and allows Chaingear owners provide different kind and versioning of Databases.\nIn reason of providing user functionality to describe their custom database data structures/schema and CRUD operations, the user creates their custom smart-contract, which implements the ISchema interface. This contract acts as inner storage, defines schema, and Database acts them on token operations (creating and deleting). A user may deploy erroneous or vulnerable Schema contract, but this should not crash Chaingear-Database NFT-token logic and Database inner entry NFT-logic too. Even if this happens Database crashing should not affect Chaingear/metadatabase contract. We proceed from the premise that the creator of the database (administrator) is positive and it does not make sense for them to break his database by initializing it with an incorrect contract.\nThis brings us to tokenized (C RU D) operations (and inner in Schema) in Database and public (C R UD) plus tokenized (CR U D) Storage operation.\nChaingear inheritance Database inheritance /chaingear  Chaingear allows any user to create his own database. Building fee is collecting by new database creation. All builded databases are tokenized with ERC721 NFT token standard and saved in Chaingear metadatabase with db metainformation. Creator of database may transfer tokenized ownership of database and destroy database with token burning. Tokenized databases Entries may collect funds by users and Database\u0026rsquo;s owner may claim them. Chaingear supports multiple benefitiaries witch have access to collected fees from databases creation. Also allows for owner add multiple database builders contracts based their on versioning or/and functionality.  /builders  DatabaseBuilder contains the code of specified version of Database. This code used by Chaingear for Database creation and deploy process. DatabaseBuilder should be added with specified version and description to Chaingear database\u0026rsquo;s builders inner list. Chaingear contract should be added as allowed caller to DatabaseBuilder with reason to allow creation calls only by Chaingear contact.  /common  Safe allows creator contract transfer ETHs to them and claim from, accounting logic holded by owner contract.\n IChaingear\n IDatabase\n IDatabaseBuilder\n ISchema\n  /databases  Database contract witch tokenize entries as NFT tokens via ERC721 standard. Users can create tokenized empty entries according to entry access policy setted in Database. Database provides tokenized (C RU D) actions, after creation of token and empty database object, user should initialize them (CR U D) in Storage. Also users can fund entries with ETHs which send to DatabaseSafe with which owner of entry token can claim funds.\n DatabaseAccessControl holds logic of controlling database and accessing to entries creation. Policy options to entries creation are OnlyAdministrator, Whitelist, AllUsers. Chaingear acts as owner of Database and creator of database acts of administrator with separated policies to Database functions.\n  /schemas  Schema partially code-generated contract where database creator setup their custom entry structure and setters/getters. Schema then initializes in Database by their creator (as admin) and completes Database setup process. Provides public (C RU D) actions for users and inner (C RU D) tokenized actions for Database. Database goes as owner of contract (and acts as proxy) with entries creating, token-based transferring and deleting.  EntryInterface interface (should be implemented in user EntryCore contract) interface ISchema { function createEntry() external; function deleteEntry(uint256) external; }  Example Schema pragma solidity 0.4.25; import \u0026quot;../common/ISchema.sol\u0026quot;; import \u0026quot;../common/IDatabase.sol\u0026quot;; import \u0026quot;openzeppelin-solidity/contracts/ownership/Ownable.sol\u0026quot;; import \u0026quot;openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\u0026quot;; contract Schema is ISchema, Ownable, SupportsInterfaceWithLookup { bytes4 constant internal INTERFACE_SCHEMA_ID = 0x153366ed; struct Entry { string name; string manifest; string extension; string content; string logo; } Entry[] public entries; IDatabase internal database; constructor() public { _registerInterface(INTERFACE_SCHEMA_ID); database = IDatabase(owner); } function() external {} function createEntry() external onlyOwner { Entry memory m = (Entry( { name: \u0026quot;\u0026quot;, manifest: \u0026quot;\u0026quot;, extension: \u0026quot;\u0026quot;, content: \u0026quot;\u0026quot;, logo: \u0026quot;\u0026quot; })); entries.push(m); } function readEntry(uint256 _entryID) external view returns ( string, string, string, string, string ) { uint256 entryIndex = database.getIndexByID(_entryID); return ( entries[entryIndex].name, entries[entryIndex].manifest, entries[entryIndex].extension, entries[entryIndex].content, entries[entryIndex].logo ); } function updateEntry( uint256 _entryID, string _name, string _manifest, string _extension, string _content, string _logo ) external { database.auth(_entryID, msg.sender); uint256 entryIndex = database.getIndexByID(_entryID); Entry memory m = (Entry( { name: _name, manifest: _manifest, extension: _extension, content: _content, logo: _logo })); entries[entryIndex] = m; } function deleteEntry(uint256 _entryIndex) external onlyOwner { uint256 lastEntryIndex = entries.length - 1; Entry memory lastEntry = entries[lastEntryIndex]; entries[_entryIndex] = lastEntry; delete entries[lastEntryIndex]; entries.length--; } }  "
    },
    {
        "uri": "/docs/chaingear/drafts/contracts/",
        "title": "",
        "description": "",
        "content": " Contracts Overview Design rationale Main design principle goes from ERC721 NFT tokenization of Databases (in Chaingear/Database of databases) and Entries (in custom user\u0026rsquo;s Database).\nIn reason of Databases tokenization in Chaingear which allows token holder acts as administrator of their Databases, Chaingear acts to Database as owner, which sets token holder as administrator on creation phase, changes administrator when holder transfers token to another user, and transfers ownership when user unregister Database in Chaingear, giving them full control to contract. Database deep-linked to Chaingear database token. In other words, token ownership means control of Database. Also, Chaingear supports multiple Database Builders (fabrics of databases of given type), and allows Chaingear owners provide different kind and versioning of Databases.\nIn reason of providing user functionality to describe their custom database data structures/schema and CRUD operations, the user creates their custom smart-contract, which implements the ISchema interface. This contract acts as inner storage, defines schema, and Database acts them on token operations (creating and deleting). A user may deploy erroneous or vulnerable Schema contract, but this should not crash Chaingear-Database NFT-token logic and Database inner entry NFT-logic too. Even if this happens Database crashing should not affect Chaingear/metadatabase contract. We proceed from the premise that the creator of the database (administrator) is positive and it does not make sense for them to break his database by initializing it with an incorrect contract.\nThis brings us to tokenized (C RU D) operations (and inner in Schema) in Database and public (C R UD) plus tokenized (CR U D) Storage operation.\nChaingear inheritance Database inheritance /chaingear  Chaingear allows any user to create his own database. Building fee is collecting by new database creation. All builded databases are tokenized with ERC721 NFT token standard and saved in Chaingear metadatabase with db metainformation. Creator of database may transfer tokenized ownership of database and destroy database with token burning. Tokenized databases Entries may collect funds by users and Database\u0026rsquo;s owner may claim them. Chaingear supports multiple benefitiaries witch have access to collected fees from databases creation. Also allows for owner add multiple database builders contracts based their on versioning or/and functionality.  /builders  DatabaseBuilder contains the code of specified version of Database. This code used by Chaingear for Database creation and deploy process. DatabaseBuilder should be added with specified version and description to Chaingear database\u0026rsquo;s builders inner list. Chaingear contract should be added as allowed caller to DatabaseBuilder with reason to allow creation calls only by Chaingear contact.  /common  Safe allows creator contract transfer ETHs to them and claim from, accounting logic holded by owner contract.\n IChaingear\n IDatabase\n IDatabaseBuilder\n ISchema\n  /databases  Database contract witch tokenize entries as NFT tokens via ERC721 standard. Users can create tokenized empty entries according to entry access policy setted in Database. Database provides tokenized (C RU D) actions, after creation of token and empty database object, user should initialize them (CR U D) in Storage. Also users can fund entries with ETHs which send to DatabaseSafe with which owner of entry token can claim funds.\n DatabaseAccessControl holds logic of controlling database and accessing to entries creation. Policy options to entries creation are OnlyAdministrator, Whitelist, AllUsers. Chaingear acts as owner of Database and creator of database acts of administrator with separated policies to Database functions.\n  /schemas  Schema partially code-generated contract where database creator setup their custom entry structure and setters/getters. Schema then initializes in Database by their creator (as admin) and completes Database setup process. Provides public (C RU D) actions for users and inner (C RU D) tokenized actions for Database. Database goes as owner of contract (and acts as proxy) with entries creating, token-based transferring and deleting.  EntryInterface interface (should be implemented in user EntryCore contract) interface ISchema { function createEntry() external; function deleteEntry(uint256) external; }  Example Schema pragma solidity 0.4.25; import \u0026quot;../common/ISchema.sol\u0026quot;; import \u0026quot;../common/IDatabase.sol\u0026quot;; import \u0026quot;openzeppelin-solidity/contracts/ownership/Ownable.sol\u0026quot;; import \u0026quot;openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\u0026quot;; contract Schema is ISchema, Ownable, SupportsInterfaceWithLookup { bytes4 constant internal INTERFACE_SCHEMA_ID = 0x153366ed; struct Entry { string name; string manifest; string extension; string content; string logo; } Entry[] public entries; IDatabase internal database; constructor() public { _registerInterface(INTERFACE_SCHEMA_ID); database = IDatabase(owner); } function() external {} function createEntry() external onlyOwner { Entry memory m = (Entry( { name: \u0026quot;\u0026quot;, manifest: \u0026quot;\u0026quot;, extension: \u0026quot;\u0026quot;, content: \u0026quot;\u0026quot;, logo: \u0026quot;\u0026quot; })); entries.push(m); } function readEntry(uint256 _entryID) external view returns ( string, string, string, string, string ) { uint256 entryIndex = database.getIndexByID(_entryID); return ( entries[entryIndex].name, entries[entryIndex].manifest, entries[entryIndex].extension, entries[entryIndex].content, entries[entryIndex].logo ); } function updateEntry( uint256 _entryID, string _name, string _manifest, string _extension, string _content, string _logo ) external { database.auth(_entryID, msg.sender); uint256 entryIndex = database.getIndexByID(_entryID); Entry memory m = (Entry( { name: _name, manifest: _manifest, extension: _extension, content: _content, logo: _logo })); entries[entryIndex] = m; } function deleteEntry(uint256 _entryIndex) external onlyOwner { uint256 lastEntryIndex = entries.length - 1; Entry memory lastEntry = entries[lastEntryIndex]; entries[_entryIndex] = lastEntry; delete entries[lastEntryIndex]; entries.length--; } }  "
    },
    {
        "uri": "/docs/chaingear/drafts/help/development/",
        "title": "",
        "description": "",
        "content": " Configuring, development and deploying Install npm i  Linting: solium -d contracts  Testing: ganache-cli -p 8545 truffle test  Deploying (for example kovan): truffle migrate --network=  "
    },
    {
        "uri": "/docs/chaingear/drafts/overview/",
        "title": "",
        "description": "",
        "content": " Overview This project allows you to create your own Database of general purpose entries on Ethereum blockchain. Entry type is defined during creation, so you can put into entry any custom logic you want (validation, entry-level permission control). Entries are tokenized as NFT.\nYour creating your database in Chaingear - metadatabase, which are one point of access to all databases. Databases on chaingear level are tokenized as NFT. Chaingear is most expensive database, so you should pay for your database and entry creation.\nFeatures Chaingear  Metadatabase with Databases entries, where each entry are ERC721 token Fee-based Database creation Creating Databases with different functionality Token-based ownership/administration for Database Funding in ETH for Database  Custom database  Custom data structure for Database (Schema) Each Entry is ERC721 token Fee-based Entry creation Token-based ownership Entry management Entry creation policies (Administrator, Whitelist, AllUsers)  Chaingear UI (browser/stand-alone web3 DApp)  Web3/Metamask/Truffle/IPFS based Full Chaingear control interface Full custom Database control interface Schema smart-contract code generation and deploying on client Databases ABI and metainformation savings in IPFS  "
    },
    {
        "uri": "/docs/chaingear/drafts/pipelines/",
        "title": "",
        "description": "",
        "content": " General Chaingear/Database pipeline Database CRUD/tokenized Entry/Funds pipeline Chaingear tokenized Database pipeline "
    },
    {
        "uri": "/docs/chaingear/help/development/",
        "title": "",
        "description": "",
        "content": " Configuring, development and deploying Install npm i  Linting: solium -d contracts  Testing: ganache-cli -p 8545 truffle test  Deploying (for example kovan): truffle migrate --network=  "
    },
    {
        "uri": "/docs/chaingear/overview/",
        "title": "",
        "description": "",
        "content": " Overview This project allows you to create your own Database of general purpose entries on Ethereum blockchain. Entry type is defined during creation, so you can put into entry any custom logic you want (validation, entry-level permission control). Entries are tokenized as NFT.\nYour creating your database in Chaingear - metadatabase, which are one point of access to all databases. Databases on chaingear level are tokenized as NFT. Chaingear is most expensive database, so you should pay for your database and entry creation.\nFeatures Chaingear  Metadatabase with Databases entries, where each entry are ERC721 token Fee-based Database creation Creating Databases with different functionality Token-based ownership/administration for Database Funding in ETH for Database  Custom database  Custom data structure for Database (Schema) Each Entry is ERC721 token Fee-based Entry creation Token-based ownership Entry management Entry creation policies (Administrator, Whitelist, AllUsers)  Chaingear UI (browser/stand-alone web3 DApp)  Web3/Metamask/Truffle/IPFS based Full Chaingear control interface Full custom Database control interface Schema smart-contract code generation and deploying on client Databases ABI and metainformation savings in IPFS  "
    },
    {
        "uri": "/docs/chaingear/pipelines/",
        "title": "",
        "description": "",
        "content": " General Chaingear/Database pipeline Database CRUD/tokenized Entry/Funds pipeline Chaingear tokenized Database pipeline "
    },
    {
        "uri": "/docs/chaingear/whitepaper/",
        "title": "",
        "description": "",
        "content": " Chaingear The consensus computer driven database framework litvintech and xhipster, Developer\u0026rsquo;s Board Members, cyber•Congress Position With the rising of decentralized computing and web3 becoming, we need fundamental peace of web3 infrastructure as decentralized databases. But as web3 different to web2 there are new approaches and challenges for their development and operating. In this paper, we are describing principles of Chaingear and their Ethereum PoC - novel Ethereum\u0026rsquo;s open-source framework for developing tokenized databases based on smart-contracts with custom data schema and CRUD+TF operations for interacting with.\nPrinciples of Chaingear Chaingear is a set of smart contracts which operating in consensus computer with following principles:\n Databases creates by user createDatabase call for Chaingear witch mints database-linked NFT token for user and deploys database with support of CRUD+TF operations. Token controls adminship of database. Admin initializes database with given table/tables data schema. Database admin may set user permissions for entry creation and fee for adding. Each entry in database linked to NFT token (primary key) which grants a set of rights for token-entry operation as UPDATE/DELETE and TRANSFER/FUND. Chaingear for given platform acts as Consensus Computer Driven Database as a Service Application specific business logic should be available to operate on top of database/databases.  Chaingear on EVM, 0.1 Euler PoC Chaingear  Chaingear is database of database which allow deploy new databases from there and creates an associated token for adminship. Chaingear allow deploys different types of databases with defined functionality with connects with databases builders. Database Builder is a fabric of databases of given type. Databases may have their unique code base as an extension to the basic database. Database-token may be transferred, sold/traded alongside with their right adminship. Chaingear have fees for database creation. Chaingear have benefitiaries which may claim collected fees proportional to their shares.  Database  A database is a smart contract which defines NFT tokens linked to entries. User creates database with given name and token symbol for entries. After deploy database admin initializes database with data schema table/tables and this allows them or/and other users to create a systematic collection of data, where rights to operations with entry defined by entry-token ownership. Entries data lives in Schema contract. Each entry may be publicly funded, an entry-token owner may claim collected funds. Database admin may set policy for entry creation: {OnlyAdmin, Whitelist, AllUsers} and fee for the entry-token creation and next claim fees. Also admin may set multiple database\u0026rsquo;s beneficiaries which may claim collected fees proportional to their shares.  Tokenization and CRUD+TF  Operation CREATE initialize empty entry and mints token. READ are publicly available with token as primary key. Each entry-token grants token-based access to UPDATE/DELETE operations on entry. DELETE operation burns token and deletes entry. Each entry-token may be transferred with TRANSFER with rights to tokenized operations. Each entry-token may be FUND. CLAIM operation for allocated funds available for token owner.  Persistent sources and deterministic regeneration For interaction with databases, we need ABI for contracts and source code for verification. ABIs and sources may be saved on some nodes and accessed with IPFS, but this access is not guaranteed. The Ethereum itself is persistent storage, and it\u0026rsquo;s a point to save ABIs and source code which guarantees databases operation. Our solution is save in database contract schema\u0026rsquo;s definition which allow deterministically regenerate ABI and source code of schema.\nGas    Operation Gas Cost ETH, 10 Gwei/gas     createDatabase (chg) ~3.5M ~0.035   initializeDatabase (db) ~2-3M ~0.02-0.03   createEntry (db+st) ~250-400K ~ 0.0025-0.004   readEntry* (st) -/* -/*   updateEntry (st) ~140-250K ~0.0014-0.0025   deleteEntry (db+st) ~180-250K ~ 0.0018-0.0025   transferFrom (db) ~100K ~0.001    Workflows Chaingear setup and Database creation/schema initialization pipeline Database CRUD/Entry-token pipeline Chaingear\u0026rsquo;s Database-token pipeline Inheritance Chaingear inheritance Database inheritance web3 Application General | | | |-|-| |||\nDatabase | | | |-|-| |||\nDatabase Deploy and Schema designer | | | |-|-| || |\nFuture work and releases  Design and architecture, security Optimization of data writes and reads, column storage Advanced indexes. Release on new virtual machine  Development Maintainers: @litvintech, @xhipster, @pechalka\n"
    },
    {
        "uri": "/docs/cyb/app-guidelines/",
        "title": "",
        "description": "",
        "content": " DApp guidelines @asadovka\nWhat is App? App in Cyb is a one or multi page application. It can be a simple html file as a frontend and may include smart contract logic as a backend. Apps should be available through IPFS hash.\nApp structure Cyb CLI can automatically generate structure for your App. All you need to do is just type some commands, come up with a name and develop!\nApp requirements We set limitations of computation resources usage for each app.\n less then 5% of CPU usage less then 10% of RAM usage  App development Here we describe how to generate initial app structure.\n Install the latest version of CYB package npm install -g cyb\n Select the path where you want to store your app. For example /Desktop/My_apps cd username/Desktop/My_apps\n Enter the name and generate the structure of the app. A folder with all necessary components will be created cyb init appname\n Go to the app folder and link your app with your Cyb cyb link\n Open the Appstore in CYB. You will see your app on «Your app» page\n  You can also use our Help App (cyb://.help/create) for more info.\nApp deployment When you are ready with development of your app you can easely publish it to the DApp Store so every user of Cyb will see it. Open your app, click on \u0026ldquo;deploy\u0026rdquo; button and enter IPFS hash of your app. Sign the transaction - your app will be registred in Chaingear. And that is it!\nApp design App design process follows Web3 design principles.\nState rules We use simple colored states for states of transactions or operations:\n mempool/failed - red confirmed/reverted - yellow finalized/succesful - green  Data visualization Data should be visualised in a simple and attractive way. No overloaded plots an diagrams, we use animation instead.\nBlockchain objects presenting Blockchain data is too complicated and sometimes not obvious for people. Thus we use adaptive tricks to make work process more convenient:\n Logical grouping for objects. Every app page has common groups of data (general, blockchain specific) for inheritance of views and better navigation or data observing. Classical accounting terms used for balance and cashflow operations. Blockahains use econimic principles for interaction between subjects thus we can describe such processes in established terms. Robohash logo for contracts entities. Contracts can act by themself, have and algorithms, so it\u0026rsquo;s more natural to perceive them like robots instead of pieces of code.  "
    },
    {
        "uri": "/docs/cyb/cyb/",
        "title": "",
        "description": "",
        "content": " Cyb: web3 browser @xhipster @asadovka\nConcept. Definitions are work in progress.\nCurrent implementation is not in comply with spec yet\nAbstract Cyb is a friendly software robot who helps you explore the universes. Put it simply it just a web3 browser. At the very beginning Cyb is focusing on developers and advanced blockchain users who are able to work with private keys and transactions. But we see how Cyb becomes friendly for everyone who wants to interact with consensus computers in a web of the third generation. This new web is designed to free developers from outdated things such as html and v8. So developers can use any markup, execution and rendering engine they wish. That is why we don\u0026rsquo;t focus on implementation of mentioned things. Instead this paper shows implementation agnostic concepts of browser that are simple enough to be adopted by web3 developers. Initially we design Cyb for conventional desktop browsing. But suggested concepts can be easily used for mobile, voice, VR and robotics implementations.\nIntroduction Current state of web3 experience is non satisfactory. We still didn\u0026rsquo;t meet any piece of software that is able to deliver deep and emotional web3 experience. So we decide to bring to the table one contender that strictly follows web3 principles defined by ourselves ;-) In a rush for this passion we define the following web3 apps which we believe together implement the full web3 vision in the context of a browsing for web3 agents and app developers:\nCLI Shell Here are the default UX elements, that Cyb uses to provide basic web3 UX:\n Navigation bar - search field, back \u0026amp; forward buttons App Bar - list of pinned favourites apps ID Bar - main identity data State Bar - node connection statuses  .cyb Cyb has a lot of user and technical settings. They are implemented in the core browser app - .cyb:\n main.cyb: main page for every joe path.cyb: user\u0026rsquo;s navigation history txq.cyb : user\u0026rsquo;s transaction activity pins.cyb: pinned user\u0026rsquo;s favourite apps and pages connect.cyb: connection manager\n root.cyb: cyb root registry\n help.cyb: cyb educational library and feedback mechanism\n dev.cyb: web3 development tool with support of contracts\n keys.cyb: keystore interface\n sign.cyb: phishing resistant signer for messages and transactions with scheduler\n wallet.cyb: universal wallet\n feed.cyb: notification \u0026amp; feed app\n access.cyb: permission manager that respects agents\u0026rsquo; resources\n  Apps Main apps for initial web3 experience\n .cyber: cyberd node manager and app for link chains + - apps.cyber: search appstore - .ipfs: ipfs node manager and agent experience .eth: ethereum node manager + ens resolver .chaingear: all the things chaingearable .wiki: wiki indexator  All this apps are considered as core apps and are included in every Cyb distribution. Let us describe in details every app as a pure concept.\n.main Purpose of the main app is to make agent happier in a moment it returns for surfing and between experiences. Main page of the browser consists of three main elements:\n search bar: provides all search functions relevance bar: the most relevant cyberlinks for a particular agent footer: cyberlinks to ecosystem resources which are important for education and contribution  .path Navigation bar in Cyb is based on the following elements:\n back button - returns user to the previous state of web3 agent search bar - provides direct access to certain state star button - allow users to pin cyberlinks forward button - brings user to the future state based on Cyb prediction  Search bar is used to browse web3. With the help of DURA with knowledge of application involved (.) it can get content across different content addressing protocols such as IPFS, DAT, SWARM, and inside blockchains, tangles and DAGs thus forming heterogeneous environment of web3. In web3 vision doc we describe in details a concept of web3 browsing based on DURA specs.\nThat is, in web3 appending \u0026ldquo;dot\u0026rdquo; works very different in comparison with web2. Dot is literally a search query to a particular app that also has a content address in heterogeneous network. All symbols after \u0026ldquo;dot\u0026rdquo; make a map with content address of an app in root registry, and all data before \u0026ldquo;dot\u0026rdquo; is a query parameter to an app.\n\u0026lt;illustration\u0026gt;  For example:\n.help query will open Cyb help app. chaingear.help will open chaingear info page in the help app. Query without \u0026ldquo;dot\u0026rdquo; will be automatically redirected to search in cyberd (Note: queries without dot is synonym to \u0026lt;your-query\u0026gt;.cyber).\nEmpty query always leads to the main page. . query returns a root registry that is being used by default in Cyb.\n\u0026lt;api-definition\u0026gt;  All cyberlinks that was requested by agent can be accessed using path app that is integral part of Cyb experience.\n.connect In web3 all data has the state, so it become easier to navigate through it and make agent experience better. To be sure that you are working with actual state Cyb needs to manage connection to web3 providers.\nOur purpose is to build web3 browser that is agnostic from addressing, identity and consensus protocols. But currently we use ipfs, parity-light and cyberd nodes to show off possible experience at early stage of web3 development without necessity to connect to web3 provider at all (be your own web3 provider) for basic needs such as popular static content surfing and simple transfers of tokens.\n\u0026lt;illustration\u0026gt;  Cyb is hiding all complexities of web3 connections under one colorful indicator that range from green to red. Ideally it works like indicator of internet connection we all used to see in smartphones. Connection indicator cyberlinked to a connect app that is integral part of id bar. It gives an ability for an agent to understand status of connections and chose web3 providers.\n\u0026lt;api-definition\u0026gt;  Ultimate purpose of connect is to remove necessity of agents to manually switch between networks. Agent do not need to think about switching across networks. It is a goal of app developers and browser vendors to define an approach that allow seamless interaction during web3 experience with all network magic happens underneath. Cyb is developing in a way that allow async interactions with several peer-to-peer networks in an app context.\n.keys Purpose of id bar is to enable the concept of identity. Using identity an agent is able to authenticate messages and sign transactions in web3. Cyb assumes that an agent interacting with web3 is using active identity, but offers ability to change id of a signed transaction during signing.\nAgent understand which id is active using identicon. Cyb computes unique and deterministic identicons for every id, but offer agent to set any identicon for local pleasure. Clicking on id bar allow agent to choose active identity from a keys app.\n\u0026lt;illustration\u0026gt;  Keys app is inherent component of id bar and embedded in Cyb. This app allows to store cryptographic secrets. Think of it as lastpass you don\u0026rsquo;t need to trust that is able to compute different addresses, one time passwords and signatures in the context of an app.\nThe following convention is used for keys:\nid: String, chainId: Number keystore: Promise \u0026lt;String\u0026gt; mnemonic: String derivationPath?: Promise \u0026lt;String\u0026gt; otherAddresses: Array \u0026lt;String\u0026gt; privateKey: String publicKey: Promise \u0026lt;String\u0026gt; type: String subtype: String  The following API is being used to programmatically interact with id bar:\nsetDefaultId(addressIndex: Number): Promise \u0026lt;Boolean\u0026gt; sign(transactionObject: Object): Promise \u0026lt;String\u0026gt; signMessage(messageObject: Object): Promise \u0026lt;String\u0026gt; verifyMessage(verificationObject: Object): Promise \u0026lt;Boolean\u0026gt;  .cyber It happens then agent knows some content address but have no idea in which network it can be retrieved as well as what app can deal with it. That is why Cyb has default integration with cyber [CYBER] protocol. Cyb append .cyber app for all request without a dot. .cyber is an app that has simple interface to cyberd, which returns prediction of related cyberlinks thus agent can get required resource directly through peer-to-peer network. Cyb has a setting of default search engine, thus an agent can plug a search she wants.\n\u0026lt;api-definition\u0026gt;  .pins App bar is a place where user can quickly get access to most used web3 objects. User can pin such objects by clicking on button \u0026ldquo;favourite\u0026rdquo; on navigation bar and then it will appear in app bar. Cyberlink manager is an attached app that allow agents to group and tag pins.\n.sign .sign allows users to sign messages and transactions in a way that brings web3 experience to the whole new level.\nBrowser use embedded app for signing transactions so user can be always sure that transaction details are valid. In a web2 there is no inherent mechanism to be sure that overlay of an app is produced by a browser and not an app itself. Cyb solves this problem deterministically generating background and sound of overlay window in a way that an underlying app cannot know the seed for generating desired sound and visual pattern. The user need to remember its unique pattern once to safely interacting with different apps including not so trusted.\nAnother problem we are approach to solve with .sign is deferred transactions. Cyb has its own address for which an agent can delegate some rights. Using this API app developer can create a logic that allow create and execute complex sequences of transactions client side. Since inception of Ethereum we sign thousands of transactions and miss even more. That is why we believe this feature is critical for awesome web3 experience.\n.crr According to [3 rules of root registry]() every developer can deliver best possible experience for their agents. That is why we want to mix the best from every word in our worlds in our implementation of root registry. To bring better user experience about 3k of records will be cybersquatted to align interests of existing app developers and agents who look for a beautiful, simple and trustful experience.\n.crr is a potpourri of the most well known concepts consolidated under one namespace! Let me introduce what is included in the shake:\n programming languages: up to 200 names common programs: up to 100 names tokens: Up to 1k names top-level domains: up to 300 names top english words: up to 1k names utf symbols: up to 300 names  Initially cyber•Congress will own all this cybersquatted records. In order to improve probability of adoption of .crr cyber•Congres will distribute this names to original app developers based on proof of dns mechanism. That is, names for programming languages, common programs, tokens and top-level domains will be distributed based on a proof of dns according to verified registry produced by cyber•Congress.\nTop english words and utf symbols will be distributed using competitions, grants and awards produced by cyber•Congress.\nInitially unregistered names in .crr will be distributed under flat fee for cyb root registry owner in Chaingear. We are going to start from 1 ETH for every name and will see will it be enough to protect from abusive squatting or not. It is possible that we will switch to auction form of distribution in a future.\n.cyb Extension over .crr.\nAdded fields: logo, tagline, manifest, meta, code, crr.\nAs result it become suitable to be an app store for browser. Appstore treats pinned apps as installed if at leas one permission is granted.\n.access Permission management is of paramount importance in the process of safe application distribution. We want to improve upon 3 critical aspects of permission management in web:\n app authentication resource management dynamic permissions  App authentication is hard in web2. You need somehow know the origin and this is practically hard in a face of government level adversaries, than you must compute hash of received file and compare it with a file hash received from origin. Due to practical complexity nobody do that. In web3 if you know that address is correct authentication is done automagically. That is why browser can easily verify that permission is granted for expected app and not malicious.\nResource management was not in place. In web2 all permission systems was primarily build around a concept of granting access to a particular data which browser has access to. While this approach find itself useful it just not enough to run any application from untrusted developers. Computing resources has fundamental value now, thus must be carefully managed and metered. In web3 its weird that any untrusted app can eat all resources of a machine in no time. Moreover, if an application is executed in a sandbox all we need to feel ourselves safe (in addition to authenticated permissions) is ensure that app do not eat more resources than expected. Libraries that help app developers to mine some proof-of-work algorithms using visitor machine become ubiquitous. Practically that means that in addition to shity ads web2 users will experience even more worse web experience: greedy, slow and battery consuming apps are coming. The answer to this upcoming problem in a browser permission system which is able to produce bounds on apps consumption of fundamental resources such as cpu, gpu, ram, storage and broadband. We believe that resource management must be in the core of web3 application engine. We are currently doing research on how that can be implemented: containerisation seems to be low hanging fruit that can be embedded right into web experience.\nPermission affordances. Current permission systems are static in a sense that browser provide limited set of predefined apis. Cookies, location, camera, microphone, sound and notifications: that is very limited set of things browsers can afford. Permissions of a third party developers are not native for a browsers either. Browser just don\u0026rsquo;t care about what data with which apps agent want to share. We ask ourselves what if a browser can ask apps what kind of permissions they can provide thus exposing this permission system to any other apps? We believe this approach will allow web3 developers provide experience inaccessible for previous architectures.\n.feed Notification panel displaying all pending transactions and web3 events corresponding to certain account. Settings button leads to settings page where user can manage connection to IPFS, Ethereum and Cyber nodes (local or remote ways).\n.ipfs This app is a third party app developed by IPFS Shipyard. This is very basic app for interacting with ipfs.\n.eth Simple app which ger DURI requests and route requests to ethereum node (contracts, transactions and blocks). Else resolve ENS.\n.wallet We believe that transfer of tokens is very basic experience in a web3 thus want to provide embedded in browser wallet app as soon as possible. Thus we consider either to develop our own bicycle or partner with some 3d party wallet developer.\n.dev Developers experience is critical for the whole web3 adoption. This app helps to develop and publish web3 apps.\n.cg Chaingear is an app that help developers create ethereum based CRUD databases. We believe it will help developers to adopt web3 easier the same they MySQL helped to site developers in the very beginning of web.\n.help Help is a two way help application. Using this app cyb helps agents to use itself. Using .help agents help Cyb evolve.\nAs an open source project we are welcome for contributions. Gitcoin is an excellent instrument that we use for delegating tasks for community a processing payments for completed ones.\nWe have our vision of how to develop browser and what kind of features develop first. But we give an opportunity for community to decide and vote with tokens what kind of browser we need to see in near future. Our product Chaingear is also made for this.\nWe use user\u0026rsquo;s feedback to make products better. So we provide options for bug reporting and feedback leaving on every page.\n.settings Cyb settings\nSaga on privacy and anonymity \u0026hellip;\nOn censorship resistance \u0026hellip;\n"
    },
    {
        "uri": "/docs/cyb/dura/",
        "title": "",
        "description": "",
        "content": " DURA: a missing piece for \u0026ldquo;The Great Web\u0026rdquo; @xhipster cyberCongress\nAbstract Originally an idea of web3 was inspired by Gavin Wood in 2014. A vision of Gavin was around 4 implementable concepts: content addressing, cryptographic identities, consensus computing and browsers. In parallel an idea of Interplanetary File System has been developed by Juan Benet. IPFS creates a foundation for web3: a system of content addressing and cryptographic identities. Since 2014 consensus computing has suffered insanely rapid development so one more missing piece is also in place. Still missing piece is a web3 browsing. Some projects such as Metamask has demonstrated a taste of web3. But one critical component in terms of browsing is just not there. URL scheme is outdated in terms of desired web3 properties and needs a drop in replacement. In this paper we propose DURA scheme aka Distributed Unified Resource Address as drop in replacement for URLs based on desired properties of \u0026ldquo;The Great Web\u0026rdquo; some of them has been defined in an article An idea of decentralized search for web3. DURA is being implemented in web3 browser Cyb. We believe DURA is a dump enough scheme (your captain) which can bring up basic consensus across web3 browser vendors due to simplicity, openness and protocol agnostic approach.\nIntroduction Current state of DNS root management is outdated. The most bad thing is that we still must to trust the most important things in our lives to strange organizations such as ICANN, IANA.\nWe can ask ourselves why after 40 years of ubiquitous computer movement we still don\u0026rsquo;t have simple common knowledge about what file extensions must be used with what software?\nDistributed Unified Resource Address or put simply DURA is a more simpler and trustful scheme then the scheme which has been used in a conventional web. In it\u0026rsquo;s root it doesn\u0026rsquo;t requires central authorities such as ICANN. Also, proposed approach do not depends on any blockchain based registry such as ENS, Chaingear or Handshake though. Only agents define which content type is being processed by which app. Using \u0026ldquo;Cascading Name Registries\u0026rdquo; technique the principle can be practical enough to become universal without harming a will of agents.\nDURA scheme [protocol]://[query].[app]  We believe that a term cyberlink can be used for DURA links in order to differentiate with hyperlinks of previous internet architecture. Further we discuss some details of a proposed linking convention.\nProtocol dura://  It is a local handler that every os can handle. Being fully optional it can be very important in the very beginning of web3. If a browser do not know the protocol handler of a link it can look up the handler in a root registry.\nQuery dura://QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa  If a browser is able to understand in which network she can resolve this particular content hash it can resolve it without much ado. Though we expect that IPFS will be not the only system and it become practically hard to say with 100% certainty whether given hash is ipfs hash or swarm or torrent or some other address type. That is there the concept of a root registry came into the game. In some sense it serves as an alternative to a self describing scheme used in CIDs. In some sense it is not, as it offers visually more sound links for agents. We believe that the root registry and self description concepts are complementary to each other.\nApp The key in our proposal is a concept of a root register. Structure of root register is a simple map between short name and ipfs hash of a program that is being triggered:\ncom:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa io:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa exe:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa pdf:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa eth:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa  A name must be letter, number or hypen.\nPurpose of a root register is bring to reach some very basic os and network agnostic agreement about what extensions with what programs must be used. Of course the problem with such registry is that it must be somehow and somewhere maintained.\ndura://QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa.ipfs  This is an example of full DURA link that is able get hash of ipfs app in a root registry, than throw predicate into this app and get a desired resource from a peer to peer network.\nImplementation in browsers  Software vendors must compete for a better root registry. Software vendors must add setting with a change of a root registry. Agents of browsers and operation systems must have ability to overwrite maps for local pleasure.  One of the implementation is a cyb root registry\nCascading name registries\nDURA extensions A lot of cool stuff can be implemented using extensions. Extension is any symbol that adds predictable and logical behavior for parsing and rendering of requests.\nThe following extensions can demonstrate the flexibility of an approach:\n app navigation app state local paths link chains URL parameters  Key principle is that semantics is programmable and can be delivered from a distributed network using symbols that has been registered in a root registry.\nApp navigation Traditionally it is up to developers how to structure navigation within an app.\nKeyword: - / after the main body\nExample: cybernode.ai/dashboard\nApp state It can be useful to have simple convention on how to reflect state of an app on a particular block.\nKeyword: - !\nExample: cybernode.ai/dashboard!1567485\nLocal paths Dura can be easily extended with conventional requirement of pointing to a certain place in a current device directory structure:\nKeyword: - / before the main body\nExamples: /users/xhipster/cybernode.ai /ethereum/cybersearch.eth\nLink chains Keyword: - @ between DURA statements\nExample: xhipster.eth@cybercongress.ai\nKey-value parameters Keywords: - ? start of kv params - \u0026amp; start of kv clause - = denote key and value\nExample: - page?name=ferret\u0026amp;color=purple\nReference  Idea of web3 Interplanetary File System Cyb  "
    },
    {
        "uri": "/docs/cyb/web3-vision/",
        "title": "",
        "description": "",
        "content": " DURA: a missing piece for web3 @xhipster cyberCongress\nEarly draft for web3 summit. Looking for a feedback.\nAbstract Originally an idea of web3 was inspired by Gavin Wood in 2014. A vision of Gavin was around 4 implementable concepts: content addressing, cryptographic identities, consensus computing and browsers. In parallel an idea of Interplanetary File System has been developed by Juan Benet. IPFS creates a foundation for web3: a system of content addressing and cryptographic identities. Since 2014 consensus computing has suffered insanely rapid development so one more missing piece is also in place. Still missing piece is a web3 browsing. Some projects such as Metamask has demonstrated a taste of web3. But one critical component in terms of browsing is just not there. URL scheme is outdated in terms of desired web3 properties and needs a drop in replacement. In this paper firstly we discuss necessary properties that we expect from web3. Based on this analysis we propose DURA scheme aka Distributed Unified Resource Address as drop in replacement for URLs that is being implemented in web3 browser Cyb. We believe DURA is a dump enough scheme (your captain) which can bring up basic consensus across web3 browser vendors due to simplicity, openness and protocol agnostic approach.\nIntroduction Conventional protocols of the Internet such as TCP/IP, DNS, HTTPS and URL brought a web into the point there it is now. Along with all benefits they has created this protocols brought more problem into the table. Globality being a key property of the the web since inception is under real threat. Speed of connections degrade with network growth and from ubiquitous government interventions into privacy and security of web users. One property, not obvious in the beginning, become really important with everyday usage of the Internet: its ability to exchange permanent hyperlinks thus they would not break after time have pass. Reliance on one at a time internet service provider architecture allow governments censor packets. This fact is the last straw in conventional web stack for every engineer who is concerned about the future of our children. Other properties while being not so critical are very desirable: offline and real-time. Average internet user being offline must have ability to work with the state it has and after acquiring connection being able to sync with global state and continue verify state\u0026rsquo;s validity in realtime while having connection. Now this properties offered on app level while such properties must be integrated into lower level protocols: into very core of web3.\nSpeed Usability researches state that interactions that do not make sense in 100 milliseconds are considered as slow by an agent. Achieving such instant speeds is nearly impossible in the current stack of protocols. The following generation of the web must enable instant responses user requests. Necessity for lookup a location of resource using remote machine is an obvious bottleneck for reaching desired properties.\nGlobality Current internet is starting to split into regions mutually inaccessible for each other. China is de facto such a region. Some countries are very close to joining the club. It is of paramount importance that web3 would remain global even in the face of government level adversaries.\nSecurity Current web applications are still in its infancy in term of permission abilities. Security of web apps is a very complicated topic. But one thing is obvious: it is hard to setup a secure system with third party apps without built in authentication system of the code being run on client machine. Current system of mutable resource location based on certificate authorities can not be safe by design.\nPermanent We are all experience broken links. IPFS has immunity to this issue. As long as you keep a file anybody can access it using globally defined immutable in time address of this file computed from the file itself.\nMesh ready Current internet paradigm is based on 1 internet provider paradigm. That is basically a bad shit, because in general even if you have 2 or more internet connection like wifi and lte your device and/or operation system don\u0026rsquo;t allow you to get the full possibilities of connectivity enforcing you to use only one connection at a time. Another major bad shit in current internet architecture is that your device is treated as leech by default. Every device keeps data necessary to being useful for surround devices. Huge portion of our network traffic goes not from origin server but from ISP cache. That means that changing a paradigm we can get to very different topology where our neighbors are our web3 providers.\nVerifiability \u0026hellip;\nPrivacy and Anonymity \u0026hellip;\nOffline \u0026hellip;\nRealtime \u0026hellip;\nRoles In a web of the third generation roles are not like in a web2. There is no clear split on users, internet providers and sites. Key difference is such that interactions can happen truly peer to peer the one can be sovereign enough to be their own internet.\n Apps. Any content hash can be an app if it is known how to parse it. Agents. An app can become an agent if she can prove that she exist by digital signature. Providers. Any agent that is able to serve content can be web3 provider.  Content addresses To understand why they so important we need to understand a difference in foundational concept of web2 and web3.\nWeb2: Where =\u0026gt; What-How: You must know resource location on a particular server to retrieve it.\nWeb3: What =\u0026gt; How: Instead of location based paradigm web3 is based on the content addressing paradigm. Key point is that we do not need to have knowledge of resource location in order to link to an object. In a web3 the answer to the How is either local or blockchain based registry with simple map between input address and address of an app.\nCryptographic identities \u0026hellip;\nConsensus computers There are some very exhaustive articles around the topic of web3 which are really about consensus computing part of it.\nWorth to note that saying that any particular blockchain or even all blockchains altogether is web3 is like saying that databases is world wide web. Yes databases technology contributed to a development of www, but without several protocols this databases would not become interconnected through billions of web sites. Remember that in order to implement a vision of full web3 potential we need to find drop in replacement for every piece of current protocol stack: IP, TCP, HTTPS, DNS and URL. None of currently deployed blockchain technologies don\u0026rsquo;t have necessary properties to directly replace dinosaurs. I would say that distributed ledger technology is a better database stack for the upcoming web.\nDURA scheme Distributed Unified Resource Address or put simply DURA is a more simpler and trustful scheme that has been used in a conventional web. It doesn\u0026rsquo;t requires central authorities such as ICANN or others:\n[protocol]://[query].[root-app]/[navigation]  We believe that a term cyberlink can be used for DURA links in order to differentiate with hyperlinks of previous internet architecture.\nProtocol dura://  It is a local handler that every os can handle. Being fully optional it can be very important in the very beginning of web3.\nQuery dura://QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa  If a browser is able to understand in which network she can resolve this particular content hash it can resolve it without much ado. Though we expect that IPFS will be not the only system and it become practically hard to say with 100% certainty whether given hash is ipfs hash or swarm or torrent or some other address type. That is there the concept of a root registry came into the game. In some sense it serves as an alternative to a self describing scheme used in CIDs. In some sense its not as it offer visually more sound links for agents. We believe that the root registry and self description concepts are complementary to each other.\nRoot registry Current state of DNS root management is outdated. The most bad thing is that we still must to trust the most important things in our lives to strange organizations such as ICANN, IANA.\nWe can ask ourselves why after 40 years of ubiquitous computer movement we still don\u0026rsquo;t have simple common knowledge about what file extensions must be used with what software?\nOur proposal is a concept of a root register. Structure of root register is a simple map between short name and ipfs hash of a program that is being triggered:\ncom:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa io:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa exe:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa pdf:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa eth:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa  A name must be letter, number or hypen.\nPurpose of a root register is to reach some very basic os and network agnostic agreement about what extensions with what programs must be used. Of course the problem with such registry is that it must be somehow and somewhere maintained.\nThree rules of a root registry  Software vendors must compete for a better root registry. Software vendors must add setting with a change of a root registry. Agents of browsers and operation systems must have ability to overwrite maps for local pleasure.  One of the implementation is a cyb root registry\nRoot registry app cyb://QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa.ipfs  This is an example of full DURA link that is able get hash of ipfs app in a root registry, than throw predicate into this app and get a desired resource from a peer to peer network.\nNote: need to add real case of ipfs DURA app being used in Cyb. Note: need to add real case on how web2 link can be resolved using DURA approach.  App navigation Traditionally its up to developers how to structure navigation within an app. But we believe that some scheme will be invented to differentiate statefull and stateless links as it is very important for\nDURA extensions A lot of cool stuff can be implemented using extensions. Extension is any symbol that adds predictable an logical behavior for parsing and rendering of requests.\nExamples: - local paths - connection links - URL parameters\nKey principle is that semantics is programmable and can be delivered from a distributed network using symbols that has been registered in a root registry.\nWhere extension Keyword: - / before content address is a local path\nExamples: /users/xhipster/cybernode.ai /ethereum/cybersearch.eth\nLinkchain extension Keyword: - @ between DURA statements\nExamples: xhipster.eth@cybercongress.ai\nNeed to find cyberlinks between two cyberlinks.\nReference \u0026hellip;\n"
    },
    {
        "uri": "/docs/go-cyber/changelog/",
        "title": "",
        "description": "",
        "content": " Change Log Unreleased Full Changelog\nClosed issues:\n Security upgrade with bump to 0.38.3\u0026frasl;0.33.3 #518 Support easy install with brew tap #426  Merged pull requests:\n upd repo name to go-cyber #527 (mrlp4) docs_fixes #526 (mrlp4) fixes_tun_val_guide #525 (mrlp4) fix_daemon_name #523 (mrlp4) Upgrade sdk and tm versions due to security issue #519 (litvintech) docs_update #517 (mrlp4)  v0.1.6 (2020-04-03) Full Changelog\nClosed issues:\n Update docs for euler-6 #503 Add network load endpoint #499 Remove graph merkling due storage iterator non-determinism #496 Add used karma to cyberlink\u0026rsquo;s events #495 The error during the signing tx with imported eth key #494 Refactore http client #493 Provide NewEventManager to links handler #488 Upgrade to cosmwasm 0.7 #484 Apply infinite gas meter to ante handler #483 Fix iteration over links storage #482 Rename cyberlink msg #480 Deploy first WASM contract to Euler-6 #479 Refactore module to go-cyber #478 Add cosmwasm build stage in Dockerfile #470 Prepare genesis file of Euler-6 #466 Export cyberlinks from Euler-5 #465 Test online upgrades in Euler-6 #464 Upgrade link\u0026rsquo;s custom storage to sdk\u0026rsquo;s storage #462 Update swagger.yaml for LCD #461 Unexpected bandwidth regeneration after a transaction #460 NaN rank values for objects after agent\u0026rsquo;s full power transfer #455 Add events to link msg #454 Wrong app hash calculated after node restart. #453 Error in RPC response, top endpoint #451 Upgrade to cosmos-sdk v0.38.0 #449 Fix overall karma calculation #448 Standalone changes of modules balance shouldn\u0026rsquo;t trigger a rank recalculation #446 Command list from euler 3 update #433 Upgrade to Cosmos-SDK 0.38.0 #429 Update run_validator guide for Euler-dev #423 WASM integration #381  Merged pull requests:\n upd to cli-install script #516 (mrlp4) update ci script for changelog generator #515 (SaveTheAles) update repo name at changelog generator #514 (SaveTheAles) Improve band and rank params init #513 (litvintech) Upd genesis hash at run_validator #512 (mrlp4) Euler-6 release #511 (litvintech) Updated README #510 (litvintech) Remove http client #509 (litvintech) Add swagger bundle for cyber #508 (litvintech) Documentation update for 0.1.6 #507 (mrlp4) Install cybercli script #506 (mrlp4) Update run validator guide #504 (mrlp4) Remove merkling of graph #501 (litvintech) Add RPC endpoint for network load #500 (litvintech) Fixed ethereum private key import #498 (litvintech) Add used karma to cyberlinks events #497 (litvintech) Fix event manager for NewLinksHangler #492 (litvintech) Fix iteration over links storage #491 (litvintech) Rename cyberlink msg #490 (litvintech) Upgrade to cosmwasm 0.7 #489 (litvintech) Add custom ante handler with applied infinity gas meter #487 (litvintech) Add cosmwasm docker build stage #486 (litvintech) Added cosmwasm module #477 (litvintech) Upgrade to cosmos-SDK v0.38.1 #476 (litvintech) Fixed NaN in weights calculation in CPU/GPU #475 (litvintech) Euler-5.1 #473 (litvintech) Fixed calculation of overall karma #459 (litvintech) Fixed triggering of rank calculation by modules #458 (litvintech) Added skipping of NaN objects during sorting #457 (litvintech) Updated index.md #442 (mrlp4) fixed title ultimate guide; fixed folders names #441 (mrlp4)  euler-5 (2019-12-20) Full Changelog\nClosed issues:\n Bump tendermint/cosmos-sdk to 0.32.8\u0026frasl;0.37.4 #437 Add overall karma stats #435 Add instructions for easy install and use non-validating version of cyberdcli #425 euler-x params discussion #422 Add rank and bandwidth modules LCD endpoints #419 Add max block bandwidth parameter #415 Make cross testing of data preparation code for GPU #413 Fix CLI output on txs #412 Add Makefile for rank CUDA kernel #409 CUDA kernel for Rank Merkle Tree calculation #401 Sync fail due to possible DB corruption #397 Add instructions to use without docker #389 Update docs on inflation params from euler-5 #385 Ability to launch validator from blockchain backup #384 Top CIDs endpoint #378 Index of used by account bandwidth for linking #371 Snapshot of Cosmos Hub for euler-5 #369 Configure BIP44 path #368 Get actual data on euler-4 validators uptime #360 Set size limit for CIDv1 #346 Prepare genesis for euler-5 with proofs flow #339 Adjust consensus and cyberd params for euler-5 #338 Add table of seed/validator nodes to README for euler-4 #319 Advanced export #318 Make profiling #317 Move bandwidth logic to ante handler #249 Download genesis files on start of docker container #224 Refactor daemon/cmd package #199 index stats rpc add block time fields #176  Merged pull requests:\n 0.1.5 docs cleanup #439 (mrlp4) Bump cosmos-sdk and tendermint versions #438 (litvintech) Added used overall karma generated by agents #436 (litvintech) Implemented top cids endpoint and top processing #434 (litvintech) run_validator_fixes #432 (mrlp4) add Tendermint KMS with Leger validator setup #431 (mrlp4) Update README.md #430 (serejandmyself) ledger_guide_cyberd #428 (mrlp4) create run_validator for euler-dev testnet #427 (mrlp4) Remove outdated whitepaper #424 (xhipster) 419 band and rank modules endpoints #420 (litvintech) Client upgrade #418 (litvintech) Added stat for used for linking band #417 (litvintech) #320 add advanced guides #390 (SaveTheAles)  v0.1.5-rc1 (2019-11-01) Full Changelog\nClosed issues:\n Change to native ante handler #403 Parallelization data preparation for GPU #400 Add Makefile #396 Cyberd Ledger support guide #391 Refactor DesirableNetworkBandwidthForRecoveryPeriod #386 Damping factor as onchain parameter #379 Upgrade to cosmos-sdk 0.37.0 #377 Fix search index loading #373 Upgrade mint module #356 Remove old distribution #353 Add validate-genesis command to CLI #335 Governance parameterization of bandwidth parameters #332 Governance parameterization of rank window #331 Adjusting of link weight #330 Answer why CyberD is better for Web3 then Google #328 Exclude at the current stage the consideration of the behavioural factor in the search for ordinary users #327 New distribution #316 Create list of supported and tested GPUs #315 Upgrade to cosmos-sdk 0.34.4 #313 Update development environment documentation #311 RPC endpoint for cid rank proofs #309 Fix pictures in whitepaper #303 Error during rewards withdrawal #302 Merkle proofs for link storage #299 Finish Proof of Code genesis drop #294 Add backup and restore validator keys guide. #286 Move bandwidth and rank constants to params store #284 Cyberadmin telegram-bot for cyberd #281 Align current network capabilities with cyberCongress pricing model #262 Add keystore doc #256 Full validating quorum #195 Infinity race problem. #172 Rank calculation period automatic adjustment #142 Slow node start-up. #138 RPC get cid rank endpoint #116 CheckTx doesn\u0026rsquo;t include coins that will be minted in current block #113  Merged pull requests:\n Added max block band params and validation #421 (litvintech) 318 advanced export #416 (litvintech) Remove outdated whitepaper from docs #414 (SaveTheAles) Added makefile for rank, added tag CUDA for daemon build #411 (litvintech) Band refactoring #408 (litvintech) Damping factor and tolerance as onchain params #407 (litvintech) Refactoring of data preparation for GPU, added workers #406 (litvintech) Added native ante handler #405 (litvintech) Added Makefile, updated Dockerfile for #404 (litvintech) Update band parameters #399 (vasilistefanenko) Sdk 37 upgrade #395 (vasilistefanenko) add Ledger support guide #392 (mrlp4) Upgrade SDK to 0.37.0 LTS #388 (litvintech) 352 link node #387 (vasilistefanenko) Update README.md #376 (serejandmyself) Search index fix #375 (litvintech) Awesome README #374 (litvintech) add governance overview article #367 (SaveTheAles) Update multisig_guide.md #366 (serejandmyself) Upgrade to cosmos-sdk #362 (litvintech) Merkle tree for links #361 (litvintech) Removed old distribution #358 (litvintech) Upgrade to cosmos-hub mint module #357 (litvintech) 309 rank proof #355 (janus) Fixes fatal mistake in distribution #348 (xhipster) Format hotfix #347 (xhipster) Edit GPU list according to @litvintech comments #345 (SaveTheAles) Change get-cyb description #344 (SaveTheAles) Add keystore managment guide #256 #343 (SaveTheAles) Merkle tree for links #340 (litvintech) Final fixes of paper #334 (xhipster) Problem with install NVIDIA drivers #326 (wimel) update run_validator #325 (wimel) #320 add multisig guide create and send #324 (SaveTheAles) Some Dan\u0026rsquo;s fixes #323 (ghost) Proposal of the new distribution #322 (xhipster) Cosmos-sdk upgrade to 0.34.4 #314 (litvintech) Updated docs for dev env setup #312 (litvintech) Add goveralls support for test coverage #305 (arturalbov)  v0.1.4 (2019-03-15) Full Changelog\nClosed issues:\n Consensus Failure #293 Enabled send #290 move debug logic to x/debug module #288 Add doc of using help feature of cli #287 Infinity loop in rank end blocker if node was restarted before x00 blocks. #283 Add doc about editing moniker and openning 26656 port. #282 Centralized network communication #257 Get supply #158 Development start guide #78  Merged pull requests:\n 0.1.4 #298 (hleb-albau) #293 Handle bank delegation method in inmem index update mechanism #297 (hleb-albau) 138 links storage #295 (hleb-albau) #78 Dev Env docs #292 (hleb-albau) #290 Enable send #291 (hleb-albau) #288 Move debug code to x/debug #289 (hleb-albau) #158 Get supply #285 (hleb-albau)  v0.1.3 (2019-03-01) Full Changelog\nClosed issues:\n Remove full index loading for next rank in link index #275 Generate lottery results cmd #273 Can not explore existing account if it have not any outgoing transactions #238 distribution validator slashes don\u0026rsquo;t work in cybercli #237 Enable governance module #193  Merged pull requests:\n minor docs reorg fixes #279 (SaveTheAles) #193 Enable governance module #278 (hleb-albau) Remove full index loading for next rank in link index #277 (arturalbov) #273 Generate lottery results cmd #274 (hleb-albau) add staging #272 (SaveTheAles) add folder removing #271 (SaveTheAles) Docs ci upd #270 (SaveTheAles)  v0.1.2 (2019-02-23) Full Changelog\nClosed issues:\n Update to cosmos 0.32.0 #265 Rank calculation failed: out of memory #264 Download golang only once during docker build. #259 Do not calculate rank, if there is no new links on last window. #258 Http client only new links option for submit endpoint #254 Add fail at height debug flags #250 Different bandwidth price on same block height #247 Add more seeds into initial config #244 Consensus failure after node restart #243 Extend isLinkExist endpoint with possibility not specify address param #242 Search returns 500 error when previously unexisted \u0026ldquo;from\u0026rdquo; CID added #241 Create awesome gif for readme #239 Add staking/validators endpoint to node RPC #235 Rest server blocks cli keystore file #233 Add cyberd rest light-client to docker image #230 Losе token on testnet #227 Launch 0.1.1 testnet #205 Cannot interact with node #203 Update cyberd.ai #185 Cyberd release scheme. #180 CI: Cyberd docker image building. Include genesis file #160 Improve building of links index for search queries #145 Store initial supply from genesis file (used by mint) #115 Genesis state generator #92 Webscoket API #76 Distribution #27 Ranking research #24 Define distribution in paper #5  Merged pull requests:\n 0.1.2 #269 (hleb-albau) Refactoring of search index. Fix links export #268 (arturalbov) Launch euler-2 testnet #267 (hleb-albau) #265 Update to cosmos 0.32.0 #266 (hleb-albau) Consensus failure after node restart #263 (arturalbov) Do not calculate rank, if there is no new links on last window. #261 (arturalbov) Client submit only new links flag #260 (hleb-albau) Improve building of links index for search queries #255 (arturalbov) #244 Add moon as seed node #253 (hleb-albau) #250 Add fail at height debug flag #251 (hleb-albau) #247 Different bandwidth price on same block height #248 (hleb-albau) #242 Extend isLinkExist endpoint with possibility not specify address #246 (hleb-albau) #242 Extend isLinkExist endpoint with possibility not specify address #245 (hleb-albau) Add staking/validators endpoint to node RPC #236 (arturalbov) Rest server blocks cli keystore file #234 (arturalbov) UPD run validator md #232 (SaveTheAles) Add cyberd rest light-client to docker image #231 (arturalbov) Fix docs #228 (arturalbov) upd run-validator.md #225 (SaveTheAles)  v0.1.1 (2019-01-31) Full Changelog\nClosed issues:\n Mass testing of cyberd-testnet 0.1.1 #219 Export 0.1.1 genesis from 0.1.0 testnet. #215 Setup 0.1.1 chain params for staking, distr, slashing, mint modules. #201 Error on replay with wrong app hash calculation (block #914381) #197  euler-1 (2019-01-31) Full Changelog\nMerged pull requests:\n Euler 0.1.1 #223 (arturalbov) Fix import reader #222 (arturalbov) Landing update #220 (asadovka) DISCUSS: Chain params for 0.1.1 network #202 (hleb-albau)  euler-1.1-dev1 (2019-01-30) Full Changelog\nClosed issues:\n Link msg bandwidth cost doesn\u0026rsquo;t take into account links count #216 Docker image with possibility to select compute unit #211  Merged pull requests:\n #215 Fix pou distribution uses share not percentage #221 (hleb-albau) #215 Fix gentx commands. #218 (hleb-albau)  euler-1.1-dev0 (2019-01-29) Full Changelog\nClosed issues:\n Fix typos #207 Update landing for 0.4 whitepaper #204 Fix validator manual #189 Update to tendermint v29.0 #187 Links Exporter #184 Change mint module to default cosmos module #181 Change Bandwidth Price to Average for 24h Sliding Window #179 High bandwidth cost for create validator msg #178 Bandwidth Specification Change #177 Add rpc endpoint to submit signed link and send messages #173 Tx size reduction: switch to more compact links tx encoding. #171 Current Bandwidth do not respect price #168 index entities count endpoint #165 negative bandwidnt #164 Add ipfs hashes to release #161 Change token name from CBD to CYB in the testnetwork #157 Wrong CYB allocation in Genesis #156 Update docker with 0.1.0 version #154 Add more issues templates. #153 Move import_private command to keys subcomand #152 Add trust-node by default in cli #151 Handle import of ethereum privkeys with 0x #150 Numerous small fixes in whitepaper #89 Cyberd landing make up #36 Whitepaper 0.4 #25  Merged pull requests:\n CI: testnet ipfs files hashes #217 (arturalbov) WIP: CI Cyberd docker image building. Include genesis file #214 (arturalbov) #197 Error on replay with wrong app hash calculation #213 (hleb-albau) Links exporter #210 (arturalbov) R4R #181 Constant Block Reward #209 (hleb-albau) 157 change token protocol name #208 (hleb-albau) Fix typos get_CYB.md #206 (serejandmyself) R4R: #156 Add Missing euler tokens cmd #200 (hleb-albau) Update to cosmos-sdk v0.30.0 #198 (hleb-albau) Tx size reduction: switch to more compact links tx encoding #192 (arturalbov) Fix rank calculation context data #191 (hleb-albau) Important fixes in validators manual #190 (xhipster) Change Bandwidth Price to Average for 24h Sliding Window #188 (arturalbov) R4R Update cosmos to latest develop #186 (hleb-albau) #153 Add more issues templates. #183 (hleb-albau) #178 #168 Bandwidth price + Msg cost for non link txes #182 (hleb-albau) #173 Add rpc endpoint to submit signed link and send messages #174 (hleb-albau) Technical notes on euler release #169 (xhipster) Handle import of ethereum privkeys with 0x. Trust node by default #167 (arturalbov) #164 fix rpc negative bw #165 add index entities count endpoint #166 (hleb-albau) Move import_private command to keys subcomand #159 (arturalbov)  v0.1.0 (2019-01-06) Full Changelog\nClosed issues:\n Cannot check balance using cli #149 Cli: Add possibility to restore acc from priv keys #146 Index out of range for cids with not calculated rank yet. #139 CID rank merkle proofs #133 Go mod Ci dependency error #128 Update to cosmos 29 #126 Simple go cyberd client #122 Write down bandwidth specification #114 Consensus hash #112 Add remainig bandwidth endpoint #109 Make docker container based on nvidia-gpu image. #104 Index transactions by addresses. #103 Calculate rank in ||, post results each 600 blocks. #101 Account inmem balances should be updated by wrapping accountKeeper #99 Get rid of RPC proxy #94 Linkchains support #91 Include addresses into knowledge graph #90 Graphics for whitepaper #88 Add bandwidth by stake #77 Launch testnet Euler #73 Test Ethereum Network Statistical Significance #52 Cyberd landing design #51 Simulation #31 Link Chain PoC | Zeronet #26 Write benchmark and test SpringRank with different amount of objects/edges #22 Parse Ethereum network and calculate SpringRank #21 Research basic chains fundamentals #15 Perfomance testing of Solana #10 Research on perfomance of consensus computers #9 Perfomance testing scenario for cyberd #8  Merged pull requests:\n [euler] Launch euler testnet #148 (hleb-albau) Cli: Add possibility to restore acc from priv keys #147 (arturalbov) Rank merkle proofs #144 (arturalbov) Setup bw params #143 (hleb-albau) Merkle tree implementation #141 (arturalbov) #139 Index out of range for cids with not calculated rank yet. #140 (hleb-albau) Fix http client and rank logs #137 (hleb-albau) [euler-dev3] New testnet #136 (hleb-albau) #101 Copy state before index creation #135 (hleb-albau) #92 Populate state with random addresses #134 (hleb-albau) Small fixes #131 (arturalbov) Parallel rank calculation #130 (arturalbov) Update stake index every block #129 (hleb-albau) #126 Update to cosmos 29 #127 (hleb-albau) Refactoring #125 (hleb-albau) Various Bug fixes #124 (hleb-albau) In-memory storages refactoring #123 (arturalbov) #114 Write bw specification #121 (hleb-albau) WIP #114 Add cbdbank module #120 (hleb-albau) Update readme #119 (hleb-albau) Clean up folders #118 (arturalbov) #103 Index transactions by signers. #117 (hleb-albau)  v0.0.8 (2018-12-11) Full Changelog\nClosed issues:\n Cid validation #93 Make up cyberd landing #87 Update to cosmos-sdk version 0.26.1 #79 Add possibility to join for new validators. #75 Calculate rank using GPU #74 Create basic wiki cyberd indexer #71 Build node releases with cleveldb #59 Remove \u0026lsquo;cosmosaccaddr\u0026rsquo; prefix from cyberd address #39 Create cyberd PoC based on Cosmos SDK #37 Draw logo for cyberd #16 Build basic economic model #1  Merged pull requests:\n #76 Define Basic RPC specification #111 (hleb-albau) #104 Make docker container based on nvidia-gpu image #110 (hleb-albau) [DON\u0026rsquo;T MERGE] Add bandwidth by stake. Part 2. #108 (arturalbov) Add bandwidth by stake Part 1 #107 (arturalbov) #93 Cid validation #106 (hleb-albau) #78 Add guide How to join network as validator #105 (hleb-albau) #1 Build basic economic model #102 (hleb-albau) Update cosmos to 0.27.0 #100 (hleb-albau) Small fixes for validators joining #98 (arturalbov) Remove poc folder #97 (hleb-albau) Add possibility to join for new validators #96 (arturalbov) Calculate eth network significance #85 (hleb-albau) 74 gpu rank calculation #83 (hleb-albau) Remove \u0026lsquo;cosmosaccaddr\u0026rsquo; prefix from cyberd address #82 (arturalbov) UPD docs_upd job #81 (SaveTheAles) Update cosmos-sdk version to 0.26.1 #80 (arturalbov)  v0.0.7 (2018-10-25) Full Changelog\nClosed issues:\n Proxy service. Add search pagination #69 Proxy service. Search request with \u0026ldquo;spaces\u0026rdquo; fails #67 Non-deterministic rank calculation #66 Claim service: increment tx sequence manually #64 Add send tokens endpoint to proxy #62  Merged pull requests:\n #71 Create basic wiki cyberd indexer #72 (hleb-albau) Proxy service. Add search pagination #70 (arturalbov) Proxy service. Search request with spaces fails #68 (arturalbov) Claim service: increment tx sequence manually #65 (arturalbov)  v0.0.6 (2018-10-24) Full Changelog\nv0.0.5 (2018-10-23) Full Changelog\nClosed issues:\n [RPC] Fix small finding #57  v0.0.4 (2018-10-23) Full Changelog\nClosed issues:\n Service to claim cyberd zeronet tokens #61 Update cosmos-sdk to latest dev branch version #56 Perfomance Degradation: Heavy Disk Usage #50  Merged pull requests:\n Add send tokens endpoint to proxy #63 (arturalbov) Claim service #60 (arturalbov) #57 [RPC] Fix small finding #58 (hleb-albau) Update cosmos-sdk to latest dev branch version #53 (hleb-albau)  v0.0.3 (2018-10-19) Full Changelog\nClosed issues:\n RPC Client: /search on non existing cid return first added cid #48 CLI: Add \u0026ldquo;wait_for_confirmation\u0026rdquo; Flag #47 Write validation logic of IPFS hash for Losion Zeronet #18 Genesis Zeronet #17 Performance testing of Zeronet #4  Merged pull requests:\n Add cyberdproxy process to docker container. Add status endpoint #55 (arturalbov) Proxy rpc #54 (arturalbov)  v0.0.2 (2018-10-05) Full Changelog\nClosed issues:\n Cosmos PoC: Integrate Rank Calculation #43 Cosmos PoC: Extenend Standart Tendermint RPC API #42 Implement persistent storage for links. #40 run extra node for cyberd #20  Merged pull requests:\n Fix search on non existing cid #49 (arturalbov) Add Circle CI build job #46 (arturalbov) Extenend Standart Tendermint RPC API #45 (arturalbov) #43 Simplest Rank #44 (hleb-albau) #40 introduce in-memory store #41 (hleb-albau) #37 redesign db, app refactor #38 (hleb-albau) Cosmos POC: Clean up CLI #35 (arturalbov) Update cyberd/cosmos README #34 (arturalbov)  v0.0.1 (2018-09-25) Closed issues:\n Make cyberd docs to be included into common wiki. #32 Write LT/NLT logic to Losion Zeronet #19 Research basic technologies #14 Research basic papers #13 Perfomance testing of Ethermint #12 Perfomance testing of Plasma #11 Perfomance testing of PoA networks #7 Cleanup paper #6 Perfomance testing of EOS #3  Merged pull requests:\n Genesis zeronet: Cosmos SDK #33 (arturalbov) [WIP] 21 calculate spring rank for ethereum #23 (hleb-albau) Fixing typo #2 (trummax)  * This Change Log was automatically generated by github_changelog_generator\n"
    },
    {
        "uri": "/docs/go-cyber/contributing/",
        "title": "",
        "description": "",
        "content": " Contributing to cyberd Thank you for considering a contribution to cyberd! This guide explains how to: * Get started * Development workflow * Get help if you encounter trouble\nGet in touch Before starting to work on a feature or a fix, please open an issue to discuss the use case or bug with us. This can save both you and us a lot of time. For any non-trivial change, we\u0026rsquo;ll ask you to create a short design document explaining:\n Why is this change done? What\u0026rsquo;s the use case? What test cases should it have? What could go wrong? How will it roughly be implemented? (We\u0026rsquo;ll happily provide code pointers to save you time)  Development Workflow Development Setup Please, use development environment setup guide.\nCreating Commits And Writing Commit Messages The commit messages that accompany your code changes are an important piece of documentation, please follow these guidelines when writing commit messages:\n Keep commits discrete: avoid including multiple unrelated changes in a single commit Keep commits self-contained: avoid spreading a single change across multiple commits. A single commit should make sense in isolation Include GitHub issue in the commit message on a first line at the beginning. Example: ``` #123 Refactor CONTRIBUTING.md  \u0026ndash;Add Creating Commits And Writing Commit Messages Section ```\nSubmitting Your Change After you submit your pull request, a core developer will review it. It is normal that this takes several iterations, so don\u0026rsquo;t get discouraged by change requests. They ensure the high quality that we all enjoy.\nGetting Help If you run into any trouble, please reach out to us on the issue you are working on.\nOur Thanks We deeply appreciate your effort toward improving cyberd. For any contribution, large or small, you will be immortalized in the release notes for the version you\u0026rsquo;ve contributed to.\n"
    },
    {
        "uri": "/docs/go-cyber/cyberd/",
        "title": "",
        "description": "",
        "content": " Whitepaper Whitepaper is published in ipfs network.\nIf you will find inconsistencies, errors or typos you can pull request improvements into the source repo.\n"
    },
    {
        "uri": "/docs/go-cyber/cyberd_ledger_guide/",
        "title": "",
        "description": "",
        "content": " Ledger nano Support It is possible to use your Ledger device with cyberd to store keys and sign transactions.\nCyberd CLI \u0026amp; Ledger Nano How to get started. First of all, you\u0026rsquo;ll need a couple of things to be done:\n A running and synced cyberd node (how to: here and here)\n Setup your Ledger device and install Cosmos app on it (the latest firmware for Ledger and Cosmos app v1.5.3 is required)\n  It is necessary to verify that cyberd is built with netgo and Ledger tags. To check that, we can run: cyberdcli version --long.\nAdd your Ledger key If you have set up your Ledger device on a different machine then the one running cyberd, it is necessary to make sure that the Ledger device is generally working on this machine. A great way to do so is installing Ledger Live on the machine and trying to connect your Ledger device to it. This will show possible issues and error codes to work with (Fix connection issues guide from Ledger). When you made sure that your Ledger device is successfully interacting with your machine do the following:\n Connect and unlock your Ledger device Open the Cosmos app on your Ledger Create an account in cyberdcli from your Ledger key  For account creation run:\ncyberdcli keys add \u0026lt;your_key_name\u0026gt; --ledger  After submitting this command your Ledger device should show a generated address and will wait for confirmation. Hit confirm the button and in the console, you\u0026rsquo;ll see the following output:\n- name: \u0026lt;your_key_name\u0026gt; type: ledger address: cyber1gw5kdey7fs9wdh05w66s0h4s24tjdvtcp5fhky pubkey: cyberpub1addwnpepq0lfpdumac47nysl06u95czd4026ahzmjr9stsx4h65kw3dhh60py0m7k6e mnemonic: \u0026quot;\u0026quot; threshold: 0 pubkeys: []  By default, the ...keys add command with account and index set to 0 of bip44 derivation path is used. To add more than one key account and/or index it must be specified separately in the following way:\ncyberdcli keys add \u0026lt;your_key2_name\u0026gt; --ledger --account 1 --index 1  You don\u0026rsquo;t need to remember which numbers for account and index you\u0026rsquo;ve used, it will be matched to  automatically.\nConfirm your address To make sure you have added everything correctly just run:\ncyberdcli keys show \u0026lt;key_name\u0026gt; -d  It\u0026rsquo;s necessary to confirm that the key on your Ledger matches the one shown in the console.\nSigning transactions You are now ready to sign and send transactions. This could be done by using the tx send command. Your Ledger device should be connected and unlocked at this step. Run the following to send some CYB tokens:\ncyberdcli tx send \u0026lt;from_key_name\u0026gt; \u0026lt;destination_address\u0026gt; \u0026lt;ammount\u0026gt;cyb --chain-id \u0026lt;current_chain_id\u0026gt;  \u0026lt;from_key_name\u0026gt; is your ledger key name, \u0026lt;destination_address\u0026gt; is the address of the recipient in the following format: cyber1wq7p5qfygxr37vqqufhj5fzwlg55zmm4w0p8sw. When prompted with confirm transaction before signing, answer Y. Your Ledger will ask to approve the transaction. Make sure you\u0026rsquo;ll inspect the transaction JSON before signing it. When the transaction is signed on the Ledger, usually, the output will show up in the console.\n"
    },
    {
        "uri": "/docs/go-cyber/get_cyb/",
        "title": "",
        "description": "",
        "content": " How to get CYB tokens Cyberd is not in the mainnet yet, so there\u0026rsquo;s no straight forward way to get CYB tokens now. Nevertheless, you could participate in the Game of Links during euler-6 to gain some CYB right in the Genesis.\nYou could also go ahead and run a validator to get more reward.\n"
    },
    {
        "uri": "/docs/go-cyber/help/problem_to_install_drivers/",
        "title": "",
        "description": "",
        "content": " Possible issue during drivers install In an installation from 0 we can find an error that forces us to restart and modify some parts in BIOS, I put the necessary steps here.\n In this case the motherboard is an Asus Z-97A, but will be similar in others motherboards.\n Steps to follow  Go to BIOS by pressing the key for it (usually F10 or DEL)\n Go to Advanced Mode (F7)\n Go to Secure Boot\n In OS Type change Windows UEFI mode to Other OS\n Save and restart\n  "
    },
    {
        "uri": "/docs/go-cyber/keystore/",
        "title": "",
        "description": "",
        "content": " Keystore management Key types Key types can be conditionally divided into two groups: agents and validators.\nAgents keys are used for linking content, sending liquid tokens, delegating, redelegating, and undelegating tokens to validators. Also, withdrawing rewards, voting and creating multisig accounts.\n cyber a.k.a. address. Cyberdcli application key.\n Derived from account mnemonic phrase, generated by cyberdcli keys add e.g. cyber15h6vd5f0wqps26zjlwrc6chah08ryu4hzzdwhc  cyberpub the public key of an account address. It is used for generating multisig addresses.\n Derived from account mnemonic phrase, generated by cyberdcli keys add e.g. cyberpub1zcjduc3q7fu03jnlu2xpl75s2nkt7krm6grh4cc5aqth73v0zwmea25wj2hsqhlqzm   All agents keypairs are stored locally in the PATH_TO_CYBERD/cli/keys folder. You can backup this folder to easily migrate between testnets or machines.\nValidators are actors on the network committing new blocks by submitting their votes. This refers to the node itself, not a single person or a single account. Therefore, the public key here is referring to the nodes public key, not the public key of the agent address.\n cybervaloper validator application-level address. It is associated with a public key cybervalconspub. This is the address used to identify your validator publicly. The private key associated with this address is used to delegate, unbond, claim rewards, and participate in governance. Generated by cyberdcli on the application level. Application keys are associated with a public key prefixed by cyberpub and an address prefixed by cyberd network. Both are derived from account keys generated by cyberdcli keys add.\n e.g. cybervaloper1carzvgq3e6y3z5kz5y6gxp3wpy3qdrv928vyah  cybervalconspub the public key of node/validator address. The private key associated with this Tendermint PubKey is used to sign prevotes and precommits.\n Generated when the node is created Get this value with cyberdcli tendermint show-validator e.g. cybervalconspub1zcjduepq0ms2738680y72v44tfyqm3c9ppduku8fs6sr73fx7m666sjztznqzp2emf    Note: A validator\u0026rsquo;s operator key is directly tied to an application key, but uses reserved prefixes solely for this purpose: cybervaloper and cybersvaloperpub.\n A nodes keypair is stored in node_key.json and priv_validator_key.json at PATH_TO_CYBERD/daemon/config folder. You can delete them and restart cyberd if you want to change this keypair. The new pair will be created automatically. Or you can backup it up and insert in the same folder during a new testnet if you want the same nodes pubkey.\nGenerate keys You\u0026rsquo;ll need an account private and public key pair (a.k.a. sk, pk respectively) to be able to receive funds, send txs, bond tx, etc.\nTo generate a new secp256k1 key:\ncyberdcli keys add \u0026lt;account_name\u0026gt;  Next, you will have to create a passphrase to protect the key on disk. The output of the above the command will contain a seed phrase. It is recommended to save the seed phrase in a safe place so that in case you forget the password, you could eventually regenerate the key from the seed phrase with the following command:\ncyberdcli keys add \u0026lt;account_name\u0026gt; --recover  Also, you can import your ETH account to cyberdcli:\ncyberdcli keys add import_private \u0026lt;account_name\u0026gt;  by using the ETH private key\n\u0026hellip; and Cosmos account by seed phrase:\ncyberdcli keys add \u0026lt;account_name\u0026gt; --recover  cyberdcli provides compatibility of Cosmos and ETH public keys with Cyber addresses.\nYou can check your application account details by account name:\ncyberdcli keys show \u0026lt;account_name\u0026gt;  You can see all of your available keys by typing:\ncyberdcli keys list  View the validator pubkey for your node by typing:\ncyberdcli tendermint show-validator   Note that this is the Tendermint signing key, not the operator key you will use in delegation transactions. ::: danger Warning We strongly recommend NOT using the same passphrase for multiple keys. The cyberd team and/or the cyber~Congress team will not be responsible for the loss of funds. :::  Important note: Starting with v.38 cosmos-SDK uses os-native keyring to store all your keys. We\u0026rsquo;ve noticed that in certain cases this does not work well by default (for example if you don\u0026rsquo;t have any GUI installed on your machine). If during the execution of the cyberdcli keys add command you get this type of error:\npanic: No such interface 'org.freedesktop.DBus.Properties' on object at path / goroutine 1 [running]: github.com/cosmos/cosmos-sdk/crypto/keys.keyringKeybase.writeInfo(0x1307a18, 0x1307a10, 0xc000b37160, 0x1, 0x1, 0xc000b37170, 0x1, 0x1, 0x147a6c0, 0xc000f1c780, ...) /root/go/pkg/mod/github.com/cosmos/cosmos-sdk@v0.38.1/crypto/keys/keyring.go:479 +0x38c github.com/cosmos/cosmos-sdk/crypto/keys.keyringKeybase.writeLocalKey(0x1307a18, 0x1307a10, 0xc000b37160, 0x1, 0x1, 0xc000b37170, 0x1, 0x1, 0x147a6c0, 0xc000f1c780, ...) /root/go/pkg/mod/github.com/cosmos/cosmos-sdk@v0.38.1/crypto/keys/keyring.go:465 +0x189 github.com/cosmos/cosmos-sdk/crypto/keys.baseKeybase.CreateAccount(0x1307a18, 0x1307a10, 0xc000b37160, 0x1, 0x1, 0xc000b37170, 0x1, 0x1, 0x146aa00, 0xc000b15630, ...) /root/go/pkg/mod/github.com/cosmos/cosmos-sdk@v0.38.1/crypto/keys/keybase_base.go:171 +0x192 github.com/cosmos/cosmos-sdk/crypto/keys.keyringKeybase.CreateAccount(...) /root/go/pkg/mod/github.com/cosmos/cosmos-sdk@v0.38.1/crypto/keys/keyring.go:107 github.com/cosmos/cosmos-sdk/client/keys.RunAddCmd(0xc000f0b400, 0xc000f125f0, 0x1, 0x1, 0x148dcc0, 0xc000aca550, 0xc000ea75c0, 0xc000ae1c08, 0x5e93b7) /root/go/pkg/mod/github.com/cosmos/cosmos-sdk@v0.38.1/client/keys/add.go:273 +0xa8b ... etc  You will have to use another keyring backend to keep your keys. Here are 2 options: store the files within the cli folder or a pass manager.\nSetting the keyring backend to a local file:\nExecute:\ncyberdcli config keyring-backend file  As a result you migth see the following: configuration saved to /root/.cybercli/config/config.toml\nExecute:\ncyberdcli config --get keyring-backend  The result should be the following:\nuser@node:~# cyberdcli config --get keyring-backend file  This means that you\u0026rsquo;ve set your keyring-backend to a local file. Note, in this case, all the keys in your keyring will be encrypted using the same password. If you would like to set up a unique password for each key, you should set a unique --home folder for each key. To do that, just use --home=/\u0026lt;unique_path_to_key_folder\u0026gt;/ with setup keyring backend and at all interactions with keys when using cyberdcli:\ncyberdcli config keyring-backend file --home=/\u0026lt;unique_path_to_key_folder\u0026gt;/ cyberdcli keys add \u0026lt;your_second_key_name\u0026gt; --home=/\u0026lt;unique_path_to_key_folder\u0026gt;/ cyberdcli keys list --home=/\u0026lt;unique_path_to_key_folder\u0026gt;/  Set keyring backend to pass manager:\nPass utility uses a GPG key to encrypt your keys (but again, it uses the same GPG for all the keys). To install and generate your GPG key you should follow this guide or this very detailed guide. When you\u0026rsquo;ll get your pass set, configure cyberdcli to use it as a keyring backend:\ncyberdcli config keyring-backend pass  And verify that all set as planned:\ncyberdcli config --get keyring-backend pass  Generate Multisig Public Keys You can generate and print a multisig public key by typing:\ncyberdcli keys add --multisig=name1,name2,name3[...] --multisig-threshold=K new_key_name  K is the minimum number of private keys that must sign the transactions that carry the address of the public key as signer.\nThe --multisig flag must contain the name of the public keys that will be combined into a public key that will be generated and stored as new_key_name in the local database. All names supplied through --multisig must already exist in the local database. Unless the flag --nosort is set, the order in which the keys are supplied on the command line does not matter, i.e. the following commands generate two identical keys:\ncyberdcli keys add --multisig=foo,bar,baz --multisig-threshold=2 multisig_address cyberdcli keys add --multisig=baz,foo,bar --multisig-threshold=2 multisig_address  Multisig addresses can also be generated on-the-fly and printed by using this command:\ncyberdcli keys show --multisig-threshold K name1 name2 name3 [...]  For more information regarding how to generate, sign and broadcast transactions with a multi-signature account see Multisig Guide.\n"
    },
    {
        "uri": "/docs/go-cyber/multisig_guide/",
        "title": "",
        "description": "",
        "content": " A guide for creating a 2 of 3 multisig account and sending transactions To follow this guide you\u0026rsquo;ll need cyberdcli installed and connected to any cyberd node (refer to our cli guide). A reminder: this guide covers all types of transactions, not only send transactions. This guide is also relevant for Cosmos Hub Gaiacli users, except for the bandwidth params, in Cosmos we pay a fee using tokens.\nDo not forget about the --chain-id flag in cyberd, and in the Cosmos Hub networks. You can always get the current \u0026lt;chain-id\u0026gt; in the master branch of the repository.\nCreating a multisig The multisig account creation and sending transactions are simple and clear but can be a little long.\n Import or create a thresholder accounts for multisig:  cyberdcli keys add test1 cyberdcli keys add test2   Add pubkeys of remote thresholder accounts:  cyberdcli keys add test3 --pubkey=\u0026lt;thresholder_pub_key\u0026gt;  We now have 3 accounts for multisig account generating: test1 and test2 on a local machine that we have access to. test3 from a remote thresholder that we do not have access to. All the created and imported accounts can be checked with:\ncyberdcli keys list   Now, we can create and test the 2-of-3 multisig account, named for example: multitest1 with keys test1,test2 on a local machine and test3 on a remote thresholder:  cyberdcli keys add multitest1 --multisig=test1,test2,test3 --multisig-threshold 2   You should top up the balance of your multisig account. Make sure that you have enough bandwidth to execute transactions later.  Spending out of a multisig account  Create an unsigned transaction from the multisig account and store it in the unsigned.json file:  cyberdcli tx send \u0026lt;recipient_address\u0026gt; \u0026lt;amount\u0026gt;cyb --from=\u0026lt;multisig_address\u0026gt; --chain-id=\u0026lt;chain_id\u0026gt; --generate-only \u0026gt; unsigned.json   Sign this transaction with the following command and then store the signed file in sign1.json:  cyberdcli tx sign unsigned.json --multisig=\u0026lt;multisig_address\u0026gt; --from=\u0026lt;your_account_name\u0026gt; --output-document sign1.json --chain-id=\u0026lt;chain_id\u0026gt;   You need to send the obtained file to a remote thresholders for signing. You can see the content of the file containing the transaction with:  cat unsigned.json  You may now copy the content that is convenient to your .json file and send it.\n You should also sign the remote thresholder, just like you did two steps above, and send your signed file back. For example sign2.json\n Copy the signed file from the remote thresholder into your cli home directory with the following command:\n  cp sign2.json $HOME/.cyberdcli  Your cli-home folder should content 3 .json files: unsigned.json, sign1.json, and sign2.json (at least). Those are the necessary and sufficient conditions, because we\u0026rsquo;ve set up a 2-out-of 3 multisig account.\n Generate a multisig transaction with all of the signatures:  cyberdcli tx multisign unsigned.json multitest1 sign1.json sign2.json --chain-id=\u0026lt;chain_id\u0026gt; \u0026gt; signed.json   Finally, we need to broadcast this transaction to the network:  cyberdcli tx broadcast signed.json --chain-id=\u0026lt;chain_id\u0026gt;  If the multisig account has enough bandwidth, the transaction should be broadcasted to the network.\n"
    },
    {
        "uri": "/docs/go-cyber/port_forwarding_guide/",
        "title": "",
        "description": "",
        "content": " Decentralization must be decentralized January 3, 2019, we\u0026rsquo;ve launched first public testnet Euler-3. Since this time we have 3 relaunches and there will be some in the future. With help from our testers and validators we are finding and fixing new bugs every day. But now one fundamental and critical bug is not fixed yet.\nAn obvious problem of decentralization is that no entity has a global vision of the system, and there is no central authority to direct nodes in making optimal decisions with regard to software updates, routing, or solving consensus. This makes the availability of a decentralized network more difficult to maintain, a factor significant enough to contribute to the failure of a system.\nBy the way, a huge part of disconnections and, as result, validators jailing happens by this reason.\nCyberd cli can’t automatically configure your router to open port 26656, so you will need to manually configure your router.\nEnabling inbound connections requires two steps:\n Giving your computer a static (unchanging) internal IP address by configuring the Dynamic Host Configuration Protocol (DHCP) on your router.\n Forwarding inbound connections from the Internet through your router to your computer where cyberd container can process them.\n Editing cyberd configuration file.\n  Configuring DHCP In order for your router to direct incoming port 26656 connections to your computer, it needs to know your computer’s internal IP address. However, routers usually give computers dynamic IP addresses that change frequently, so we need to ensure your router always gives your computer the same internal IP address.\nStart by logging into your router’s administration interface. Most routers can be configured using one of the following URLs, so keep clicking links until you find one that works. If none work, consult your router’s manual.\nhttp://192.168.0.1 (some Linksys/Cisco models) http://192.168.1.1 (some D-Link/Netgear models) http://192.168.2.1 (some Belkin/SMC models) http://192.168.123.254 (some US Robotics models) http://10.0.1.1 (some Apple models)  Upon connecting, you will probably be prompted for a username and password. If you configured a password, enter it now. If not, the Router Passwords site provides a database of known default username and password pairs.\nAfter logging in, you want to search your router’s menus for options related to DHCP, the Dynamic Host Configuration Protocol. These options may also be called Address Reservation.\nIn the reservation configuration, some routers will display a list of computers and devices currently connected to your network, and then let you select a device to make its current IP address permanent.\nIf that’s the case, find the computer running cyberd container in the list, select it, and add it to the list of reserved addresses. Make a note of its current IP address—we’ll use the address in the next section.\nOther routers require a more manual configuration. For these routers, you will need to look up the fixed address (MAC address) for your computer’s network card and add it to the list.\nOpen a terminal and type ifconfig. Find the result that best matches your connection—a result starting with wlan indicates a wireless connection. Find the field that starts with HWaddr and copy the immediately following field that looks like 01:23:45:67:89:ab. Use that value in the instructions below.\nOnce you have the MAC address, you can fill it into to your router’s manual DHCP assignment table. Also, choose an IP address and make a note of it for the instructions in the next subsection. After entering this information, click the Add or Save button.\nThen reboot your computer to ensure it gets assigned the address you selected and proceed to the Port Forwarding instructions below.\nPort Forwarding An easiest way to find some detailed instructions for you router is check here or here.\nHere we\u0026rsquo;ll provide you general idea of what has to be done.\nYou need to know the local IP address of the computer running cyberd container. You should have this information from configuring the DHCP assignment table in the subsection above.\nLogin to your router using the same steps described near the top of the DHCP subsection. Look for an option called Port Forwarding, Port Assignment, or anything with “Port” in its name. On some routers, this option is buried in an Applications \u0026amp; Gaming menu.\nThe port forwarding settings should allow you to map an external port on your router to the “internal port” of a device on your network.\nBoth the external port and the internal port should be 26656 for cyberd container.\nMake sure the IP address you enter is the same one you configured in the previous subsection.\nAfter filling in the details for the mapping, save the entry. You should not need to restart anything.\nIf you still can’t connect and you use a firewall, you probably need to change your firewall settings. Ubuntu comes with its firewall disabled by default, but if you have enabled it, see the Ubuntu wiki page for information about adding port forwarding rules.\nIf something else went wrong, it’s probably a problem with your router configuration. Re-read the instructions above to see if you missed anything, try to look for some port-forwarding instructions here or here.\nConfiguring cyberd Go to cyberd daemon folder, then go to config folder and open config.toml file for editing.\nFind peer to peer configuration options section and edit external_address variable with your IP address and port 26656\nRestart cyberd service.\nWe call to you, validators, with a proposal to open port 26656 and make you validator-nodes available to the incoming connection.\n"
    },
    {
        "uri": "/docs/go-cyber/rpc/",
        "title": "",
        "description": "",
        "content": " API reference Cyberd provides a JSON-RPC type API. The HTTP endpoint is served under localhost:20657. WebSockets are the preferred transport for cyberd RPC and are used by applications, such as cyb. The default WebSocket connection endpoint for cyberd is ws://localhost:26657/websocket. There are test endpoints available at https://titan.cybernode.ai/api/ and ws://titan.cybernode.ai/websocket.\n\nStandard Methods Query Example Query the HTTP endpoint using curl:\ncurl --data '{\u0026quot;method\u0026quot;:\u0026quot;status\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:\u0026quot;1\u0026quot;,\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;}' \\ -H \u0026quot;Content-Type: application/json\u0026quot; -X POST earth.cybernode.ai:34657  Query ws endpoint from JS:\nlet websocket = new WebSocket(\u0026quot;ws://earth.cybernode.ai:34657/websocket\u0026quot;); websocket.send(JSON.stringify({ \u0026quot;method\u0026quot;:\u0026quot;status\u0026quot;, \u0026quot;params\u0026quot;:[], \u0026quot;id\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot; }));  Method Overview The following is an overview of the RPC methods and their current status. Click the method name for further detail, such as parameter, and this will return information.\n   # Method Description     1 status Get node info, pubkey, latest block hash, app hash, block height and time.   2 account Get account nonce, pubkey, number, and coins.   3 account_bandwidth Get account bandwidth info for current height.   4 is_link_exist Return true, if given link exist.   5 current_bandwidth_price Returns current bandwidth credit price.   6 index_stats Returns current index entities count.    Method Details          Method status   Parameters None   Description Get node info, pubkey, latest block hash, app hash, block height and time.   Return to Overview\n              Method account   Parameters 1. address (string, required)\n   Description Get account nonce, pubkey, number, and coins.   Return to Overview\n              Method account_bandwidth   Parameters 1. address (string, required)\n   Description Get account bandwidth info for current height.   Return to Overview\n              Method is_link_exist   Parameters 1. from (cid, required)\n2. to (cid, required)\n3. address (string, required)\n   Description Return true, if given link exist.   Return to Overview\n              Method current_bandwidth_price   Parameters None   Description Returns current bandwidth credit price.   Return to Overview\n              Method index_stats   Parameters None   Description Returns current index entities count.   Return to Overview\n     \nNotifications (WebSocket-specific) Cyberd uses standard JSON-RPC notifications to notify clients of changes rather than requiring clients to poll cyberd for updates. JSON-RPC notifications are a subset of requests, but do not contain an ID. The notification type is categorized by the query params field.\nSubscribe Example Subscribe for new block headers from JS:\nlet websocket = new WebSocket(\u0026quot;ws://earth.cybernode.ai:34657/websocket\u0026quot;); websocket.send(JSON.stringify({ \u0026quot;method\u0026quot;: \u0026quot;subscribe\u0026quot;, \u0026quot;params\u0026quot;: [\u0026quot;tm.event='NewBlockHeader'\u0026quot;], \u0026quot;id\u0026quot;: \u0026quot;1\u0026quot;, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot; }));  Events Overview    # Event Description     1 NewBlockHeader Sends a block header notification when a new block is committed.   2 CoinsReceived Sends a notification when new coinc arrive to a given address.   3 CoinsSend Sends a notification when new coins are sent from a given address.   4 СidsLinked Notification of links created by a given address.   5 SignedTxCommitted Notify when any tx for a given signer is committed.    Events Details NewBlockHeader          Event NewBlockHeader   Description Sends block header notification when a new block is committed.   Query tm.event='NewBlockHeader'   Return to Overview\n     CoinsReceived          Event CoinsReceived   Description Sends a notification when new coins have arrived to a given address.   Query tm.event='EventTx' AND recipient='cbd1sk3uvpacpjm2t3389caqk4gd9n9gkzq2054yds'   Return to Overview\n     CoinsSend          Event CoinsSend   Description Sends a notification when new coins are sent from a given address.   Query tm.event='EventTx' AND sender='cbd1sk3uvpacpjm2t3389caqk4gd9n9gkzq2054yds'   Return to Overview\n     СidsLinked          Event СidsLinked   Description Notification of links created by a given address.   Query tm.event='EventTx' AND signer='cbd1sk3uvpacpjm2t3389caqk4gd9n9gkzq2054yds' AND action='link'   Return to Overview\n     SignedTxCommitted          Event SignedTxCommitted   Description Notify when any tx for a given signer is committed.   Query tm.event='EventTx' AND signer='cbd1sk3uvpacpjm2t3389caqk4gd9n9gkzq2054yds'   Return to Overview\n     "
    },
    {
        "uri": "/docs/go-cyber/run_validator/",
        "title": "",
        "description": "",
        "content": " Join Cyberd testnet as a Validator Note The current active testnet is euler-6 (substitute  with that value, do not forget to remove the \u0026lt; and the \u0026gt; symbols).\nPrepare your server First of all, you should set up a server. Your node should be running (online) constantly. This means that you will need a reliable server to keep it running. You may also consider using any cloud service with a dedicated GPU, like Hetzner (or use a local machine). Whatever you\u0026rsquo;ll choose, for better stability and consistency we recommend to use a dedicated server for each separate validator node.\nCyberd is based on Cosmos-SDK and is written in Go. It should work on any platform which can compile and run programs in Go. However, we strongly recommend running the validator node on a Linux-based server.\nThe rank calculations are done via GPU computations. They are easy to parallelize. This is why we recommended using a GPU.\nRecommended requirements:\nCPU: 6 cores RAM: 32 GB SSD: 256 GB Connection: 100Mb, Fiber, Stable and low-latency connection GPU: Nvidia GeForce(or Tesla/Titan/Quadro) with CUDA-cores; at least 6gb of memory* Software: Ubuntu 18.04 LTS  Cyberd runs well on consumer-grade cards like Geforce GTX 1070, but we expect load growth and advise to use Error Correction compatible cards from Tesla or Quadro families. Also, make sure your card is compatible with \u0026gt;=v.410 of NVIDIA drivers.\nWhat about RAM? The minimal ammount, which will fit a node (with ~100K links in the chain): 10 GB. It migth be possiple to start a node with a lower ammount of RAM, but we migth not be able to support these cases.\nOf course, the hardware is your own choice and technically it might be possible to run the node on \u0026ldquo;even - 1 CUDA core GPU\u0026rdquo;, but you should be aware of stability and in a decline in the calculation speed of the rank.\nValidator setup To avoid possible misconfiguration issues and to simplify the setup of $ENV, we recommend to perform all the commands as root (here root - is literally root, not just a user with root priveliges)\nThird-party software To access the GPU, cyberd uses Nvidia drivers version 410+ and the Nvidia CUDA toolkit should be installed on the hosting system.\nYou may skip any sections of the guide if you already have any of the necessary software configured.\nAs long as the current implementation of cyber is written in Go, you will need to install Go.\nInstalling Go For euler-6 Cyberd requires at least Go version 1.13+. Install it according to the official guide:\n Download the archive:  wget https://dl.google.com/go/go1.13.11.linux-amd64.tar.gz   Extract it into /usr/local, creating a Go tree in /usr/local/go:  tar -C /usr/local -xzf go1.13.11.linux-amd64.tar.gz   Add /usr/local/go/bin to the PATH environment variable. You can do this by adding this line to your /etc/profile (for installation on the whole system) or $HOME/.bashrc:  export PATH=$PATH:/usr/local/go/bin   Do source for the file with your $PATH variable or just log-out/log-in:  source /etc/profile  or\nsource $HOME/.bashrc   To check your installation run  `go version`  This will let you know if everything was installed correctly. As an output, you should see the following (version number may vary, of course):\ngo version go1.13.11 linux/amd64  Installing Nvidia drivers To proceed, first, add the ppa:graphics-drivers/ppa repository into your system (you might see some warnings - press enter):\nsudo add-apt-repository ppa:graphics-drivers/ppa  sudo apt update  Install Ubuntu-drivers:\nsudo apt install -y ubuntu-drivers-common  Next, identify your graphic card model and the recommended drivers:\nubuntu-drivers devices  You should see something similar to this:\n== /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0 == modalias : pci:v000010DEd00001BA1sv00001462sd000011E4bc03sc00i00 vendor : NVIDIA Corporation model : GP104M [GeForce GTX 1070 Mobile] driver : nvidia-driver-418 - third-party free driver : nvidia-driver-410 - third-party free driver : nvidia-driver-430 - third-party free driver : nvidia-driver-440 - third-party free recommended driver : xserver-xorg-video-nouveau - distro free builtin  We need the 410+ drivers release. As you can see that v440 is recommended. The command below will install the recommended version of the drivers:\nsudo ubuntu-drivers autoinstall  The driver installation takes approximately 10 minutes.\nDKMS: install completed. Setting up libxdamage1:i386 (1:1.1.4-3) ... Setting up libxext6:i386 (2:1.3.3-1) ... Setting up libxfixes3:i386 (1:5.0.3-1) ... Setting up libnvidia-decode-415:i386 (415.27-0ubuntu0~gpu18.04.1) ... Setting up build-essential (12.4ubuntu1) ... Setting up libnvidia-gl-415:i386 (415.27-0ubuntu0~gpu18.04.1) ... Setting up libnvidia-encode-415:i386 (415.27-0ubuntu0~gpu18.04.1) ... Setting up nvidia-driver-415 (415.27-0ubuntu0~gpu18.04.1) ... Setting up libxxf86vm1:i386 (1:1.1.4-1) ... Setting up libglx-mesa0:i386 (18.0.5-0ubuntu0~18.04.1) ... Setting up libglx0:i386 (1.0.0-2ubuntu2.2) ... Setting up libgl1:i386 (1.0.0-2ubuntu2.2) ... Setting up libnvidia-ifr1-415:i386 (415.27-0ubuntu0~gpu18.04.1) ... Setting up libnvidia-fbc1-415:i386 (415.27-0ubuntu0~gpu18.04.1) ... Processing triggers for libc-bin (2.27-3ubuntu1) ... Processing triggers for initramfs-tools (0.130ubuntu3.1) ... update-initramfs: Generating /boot/initrd.img-4.15.0-45-generic  Reboot the system for the changes to take effect.\nCheck the installed drivers:\nnvidia-smi  You should see this: (Some version/driver numbers might differ. You might also have some processes already running)\n+-----------------------------------------------------------------------------+ | NVIDIA-SMI 440.26 Driver Version: 430.14 CUDA Version: 10.2 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | |===============================+======================+======================| | 0 GeForce GTX 1070 Off | 00000000:01:00.0 Off | N/A | | 26% 36C P5 26W / 180W | 0MiB / 8119MiB | 2% Default | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: GPU Memory | | GPU PID Type Process name Usage | |=============================================================================| | No running processes found | +-----------------------------------------------------------------------------+  Install CUDA toolkit Simply run:\napt install nvidia-cuda-toolkit  Any version above 9.1 is OK. To check the version run:\nnvcc --version  The possible output will look like this:\nnvcc: NVIDIA (R) Cuda compiler driver Copyright (c) 2005-2017 NVIDIA Corporation Built on Fri_Nov__3_21:07:56_CDT_2017 Cuda compilation tools, release 9.1, V9.1.85  Launching Cyberd fullnode Add environment variables:\nexport DAEMON_HOME=$HOME/.cyberd export DAEMON_NAME=cyberd  To make those variables persistent add them to the end of the $HOME/.bashrc and log-out/log-in, or do:\nsource ~/.bashrc  Make a directories tree for storing your daemon:\nmkdir $HOME/.cyberd mkdir -p $DAEMON_HOME/upgrade_manager mkdir -p $DAEMON_HOME/upgrade_manager/genesis mkdir -p $DAEMON_HOME/upgrade_manager/genesis/bin  Download cosmosd (upgrade manager for Cosmos SDK) of version 2.0 and build it:\nwget https://github.com/regen-network/cosmosd/archive/0.2.0.tar.gz tar -xzf 0.2.0.tar.gz cd cosmosd-0.2.0/ go build mv cosmosd $DAEMON_HOME/ chmod +x $DAEMON_HOME/cosmosd  Clone the go-cyber repo, checkout to the necessary version (master by default):\ncd ~ git clone https://github.com/cybercongress/go-cyber  Build cyber~Rank CUDA kernel:\ncd ~/go-cyber/x/rank/cuda/ make  Build cyber daemon (as a result you should see cyberd and cyberdcli files inside of the go-cyber/build/ folder):\ncd ~/go-cyber make build  If you are getting an error about the libgo_cosmwasm.so library missing, please download and build cosmwasm version 0.7.2 (smart-contracts module for Cosmos SDK) then copy the missing libraries, and re-build cyberd:\nwget https://github.com/CosmWasm/go-cosmwasm/archive/v0.7.2.tar.gz tar -xzf v0.7.2.tar.gz cd go-cosmwasm-0.7.2/ make build cp ./api/libgo_cosmwasm.so /usr/lib/ cp ./api/libgo_cosmwasm.dylib /usr/lib/  Copy cyberd the binaries to an apropriate locations and add execute permitions to them:\ncp build/cyberd $DAEMON_HOME/upgrade_manager/genesis/bin cp build/cyberdcli /usr/local/bin/ cp build/cyberd /usr/local/bin/ chmod +x $DAEMON_HOME/upgrade_manager/genesis/bin/cyberd  Initialize cyber daemon (don\u0026rsquo;t forget to change the node moniker):\ncd $DAEMON_HOME/upgrade_manager/genesis/bin ./cyberd init \u0026lt;your_node_moniker\u0026gt; --home $DAEMON_HOME  Your folder with cyberd must look like this after initialization:\nroot@node:~/.cyberd# tree . ├── config │ ├── app.toml │ ├── config.toml │ ├── node_key.json │ └── priv_validator_key.json ├── cosmosd ├── data │ └── priv_validator_state.json └── upgrade_manager └── genesis └── bin └── cyberd  As a result of this operation, the data and config folders should appear inside of your $DAEMON_HOME/ folder.\nDownload genesis.json and place into your .cyberd/config:\ncd $DAEMON_HOME/config wget -O genesis.json https://ipfs.io/ipfs/QmZHpLc3H5RMXp3Z4LURNpKgNfXd3NZ8pZLYbjNFPL6T5n  Setup private peers in config.toml. You can find them on our forum.\nSetup cyberd as a service (Ubuntu) Increase resource limits for Tendermint:\nulimit -n 4096  Make cyberd a system service. This will help you easily start/stop cyberd and run it in the background:\nsudo nano /etc/systemd/system/cyberd.service  Paste the following (replace ubuntu with your username, or if you running as root replce the whole /home/ubuntu/ to /root/):\n[Unit] Description=Cyber Node After=network-online.target [Service] User=ubuntu WorkingDirectory=/home/ubuntu/.cyberd/ ExecStart=/home/ubuntu/.cyberd/cosmosd start --compute-rank-on-gpu=true Environment=DAEMON_HOME=/home/ubuntu/.cyberd Environment=DAEMON_NAME=cyberd Environment=GAIA_HOME=/home/ubuntu/.cyberd Restart=always RestartSec=3m LimitNOFILE=4096 [Install] WantedBy=multi-user.target  If you need to enable search of the node add the flag --allow-search=true right after --compute-rank-on-gpu=true. If you need to run a rest-server alongside cyberd here is a service file for it (do sudo nano /etc/systemd/system/cyberdcli-rest.service and paste the following), just make sure you\u0026rsquo;ll replace ubuntu to your user name and group:\n[Unit] Description=Cyberdcli REST Server [Service] User=ubuntu Group=ubuntu ExecStart=/usr/local/bin/cyberdcli rest-server --laddr tcp://0.0.0.0:1317 --chain-id euler-6 Restart=always TimeoutSec=120 RestartSec=30 [Install] WantedBy=multi-user.target  There\u0026rsquo;s a possibility to build and run swagger-ui for your node to get a better experience with the rest-server. To get it up you\u0026rsquo;ll have to install static library for Go:\ngo get github.com/rakyll/statik  Then cd to the go-cyber repo and set static file for swagger-ui:\ncd \u0026lt;path_to_go-cyber\u0026gt;/go-cyber/ statik -src=cmd/cyberdcli/swagger-ui -dest=cmd/cyberdcli/lcd -f  Rebuild cyberdcli and replace the one in /usr/local/bin (no worries, you won\u0026rsquo;t lose your keys, if you already have keys imported):\nmake build cp build/cyberdcli /usr/local/bin/  When all of the above steps are completed and cyberdcli-rest service has been started, you should have Swagger-ui available at http://localhost:1317/swagger-ui/ .\nRun cyberd:\nReload systemd after the creation of the new service:\nsystemctl daemon-reload  Start the node:\nsudo systemctl start cyberd  Check node status:\nsudo systemctl status cyberd  Enable the service to start with the system:\nsudo systemctl enable cyberd  Check logs:\njournalctl -u cyberd -f --lines 20  If you need to stop the node:\nsudo systemctl stop cyberd  All commands in this section are also applicable to cyberdcli-rest.service.\nAt this point your cyberd should be running in the backgroud and you should be able to call cyberdcli to operate with the client. Try calling cyberdcli status. A possible output looks like this:\n{\u0026quot;node_info\u0026quot;:{\u0026quot;protocol_version\u0026quot;:{\u0026quot;p2p\u0026quot;:\u0026quot;6\u0026quot;,\u0026quot;block\u0026quot;:\u0026quot;9\u0026quot;,\u0026quot;app\u0026quot;:\u0026quot;0\u0026quot;},\u0026quot;id\u0026quot;:\u0026quot;93b776d3eb3f3ce9d9bda7164bc8af3acacff7b6\u0026quot;,\u0026quot;listen_addr\u0026quot;:\u0026quot;tcp://0.0.0.0:26656\u0026quot;,\u0026quot;network\u0026quot;:\u0026quot;euler-6\u0026quot;,\u0026quot;version\u0026quot;:\u0026quot;0.32.7\u0026quot;,\u0026quot;channels\u0026quot;:\u0026quot;4020212223303800\u0026quot;,\u0026quot;moniker\u0026quot;:\u0026quot;anon\u0026quot;,\u0026quot;other\u0026quot;:{\u0026quot;tx_index\u0026quot;:\u0026quot;on\u0026quot;,\u0026quot;rpc_address\u0026quot;:\u0026quot;tcp://0.0.0.0:26657\u0026quot;}},\u0026quot;sync_info\u0026quot;:{\u0026quot;latest_block_hash\u0026quot;:\u0026quot;686B4E65415D4E56D3B406153C965C0897D0CE27004E9CABF65064B6A0ED4240\u0026quot;,\u0026quot;latest_app_hash\u0026quot;:\u0026quot;0A1F6D260945FD6E926785F07D41049B8060C60A132F5BA49DD54F7B1C5B2522\u0026quot;,\u0026quot;latest_block_height\u0026quot;:\u0026quot;4553\u0026quot;,\u0026quot;latest_block_time\u0026quot;:\u0026quot;2019-11-24T09:49:19.771375108Z\u0026quot;,\u0026quot;catching_up\u0026quot;:false},\u0026quot;validator_info\u0026quot;:{\u0026quot;address\u0026quot;:\u0026quot;66098853CF3B61C4313DD487BA21EDF8DECACDF0\u0026quot;,\u0026quot;pub_key\u0026quot;:{\u0026quot;type\u0026quot;:\u0026quot;tendermint/PubKeyEd25519\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;uZrCCdZTJoHE1/v+EvhtZufJgA3zAm1bN4uZA3RyvoY=\u0026quot;},\u0026quot;voting_power\u0026quot;:\u0026quot;0\u0026quot;}}  Your node has started to sync. If that didn\u0026rsquo;t happen, check your config.toml file located at $DAEMON_HOME/config/config.toml and add at least a couple of addresses to and , some of those you can find on our forum.\nAdditional information about the chain is available via an API endpoint at: localhost:26657 (access via your browser)\nE.G. the number of active validators is available at: localhost:26657/validators\nIf your node did not launch correctly from the genesis, you need to set the current link to cosmosd for cyber daemon:\nln -s $DAEMON_HOME/upgrade_manager/genesis current  If you joined the testnet after a chain upgrade happened, you must point your current link to a new location (with an approptiatly upgraded binary file):\nmkdir $DAEMON_HOME/upgrade_manager/upgrades cp \u0026lt;path_to_upgraded_cyberd\u0026gt; $DAEMON_HOME/upgrade_manager/upgrades ln -s $DAEMON_HOME/upgrade_manager/upgrades current  Validator start After your node has successfully sycned, you can run your validator.\nPrepare a staking address We included ~1 million Ethereum addresses, over 10000 Cosmos addresses and all of euler-4 validators addresses into the genesis file. This means that there\u0026rsquo;s a huge chance that you already have some EUL tokens. Here are 3 ways to check this:\nIf you already have a cyberd address with EUL and know the seed phrase or your private key, just restore it into your local Keystore:\ncyberdcli keys add \u0026lt;your_key_name\u0026gt; --recover cyberdcli keys show \u0026lt;your_key_name\u0026gt;  If you have an Ethereum address that had ~0.2Eth or more at block 8080808 (on the ETH network), you probably received a gift and may import your Ethereum private key. To check your gift balance, paste your Ethereum address on cyber.page.\n Please do not import high-value Ethereum accounts. This is not safe! cyberd software is new and has not been audited yet.\n cyberdcli keys add private \u0026lt;your_key_name\u0026gt; cyberdcli keys show \u0026lt;your_key_name\u0026gt;  If you want to create a new account, use the command below: (You should send coins to that address to bound them later during the launch of the validator)\ncyberdcli keys add \u0026lt;your_key_name\u0026gt; cyberdcli keys show \u0026lt;your_key_name\u0026gt;  You could use your Ledger device, with the Cosmos app installed on it to sign and store cyber addresses: guide here. In most cases use the \u0026ndash;ledger flag, with your commands:\ncyberdcli keys add \u0026lt;your_key_name\u0026gt; --ledger   is any name you pick to represent this key pair. You have to refer to this parameter  later when you use the keys to sign transactions. It will ask you to enter your password twice to encrypt the key. You will also need to enter your password when you use your key to sign any transaction.\nThe command returns the address, a public key and a seed phrase, which you can use to recover your account if you forget your password later. Keep the seed phrase at a safe place (not in hot storage) in case you have to use it.\nThe address shown here is your account address. Let’s call this . It stores your assets.\nImportant note: Starting with v.38 cosmos-SDK uses os-native keyring to store all your keys. We\u0026rsquo;ve noticed that in certain cases it does not work well by default (for example if you don\u0026rsquo;t have any GUI installed on your machine). If during the execution of the cyberdcli keys add command, you are getting this type of error:\npanic: No such interface 'org.freedesktop.DBus.Properties' on object at path / goroutine 1 [running]: github.com/cosmos/cosmos-sdk/crypto/keys.keyringKeybase.writeInfo(0x1307a18, 0x1307a10, 0xc000b37160, 0x1, 0x1, 0xc000b37170, 0x1, 0x1, 0x147a6c0, 0xc000f1c780, ...) /root/go/pkg/mod/github.com/cosmos/cosmos-sdk@v0.38.1/crypto/keys/keyring.go:479 +0x38c github.com/cosmos/cosmos-sdk/crypto/keys.keyringKeybase.writeLocalKey(0x1307a18, 0x1307a10, 0xc000b37160, 0x1, 0x1, 0xc000b37170, 0x1, 0x1, 0x147a6c0, 0xc000f1c780, ...) /root/go/pkg/mod/github.com/cosmos/cosmos-sdk@v0.38.1/crypto/keys/keyring.go:465 +0x189 github.com/cosmos/cosmos-sdk/crypto/keys.baseKeybase.CreateAccount(0x1307a18, 0x1307a10, 0xc000b37160, 0x1, 0x1, 0xc000b37170, 0x1, 0x1, 0x146aa00, 0xc000b15630, ...) /root/go/pkg/mod/github.com/cosmos/cosmos-sdk@v0.38.1/crypto/keys/keybase_base.go:171 +0x192 github.com/cosmos/cosmos-sdk/crypto/keys.keyringKeybase.CreateAccount(...) /root/go/pkg/mod/github.com/cosmos/cosmos-sdk@v0.38.1/crypto/keys/keyring.go:107 github.com/cosmos/cosmos-sdk/client/keys.RunAddCmd(0xc000f0b400, 0xc000f125f0, 0x1, 0x1, 0x148dcc0, 0xc000aca550, 0xc000ea75c0, 0xc000ae1c08, 0x5e93b7) /root/go/pkg/mod/github.com/cosmos/cosmos-sdk@v0.38.1/client/keys/add.go:273 +0xa8b ... etc  You will have to use another keyring backend to keep your keys. Here are 2 options: store the files within the cli folder or a pass manager.\nSetting keyring backend to a local file:\nExecute:\ncyberdcli config keyring-backend file  As a result you migth see following: configuration saved to /root/.cybercli/config/config.toml\nExecute:\ncyberdcli config --get keyring-backend  The result should be the following:\nuser@node:~# cyberdcli config --get keyring-backend file  This means that you\u0026rsquo;ve set your keyring-backend to a local file. Note, in this case, all the keys in your keyring will be encrypted using the same password. If you would like to set up a unique password for each key, you should set a unique --home folder for each key. To do that, just use --home=/\u0026lt;unique_path_to_key_folder\u0026gt;/ with setup keyring backend and at all interactions with keys when using cyberdcli:\ncyberdcli config keyring-backend file --home=/\u0026lt;unique_path_to_key_folder\u0026gt;/ cyberdcli keys add \u0026lt;your_second_key_name\u0026gt; --home=/\u0026lt;unique_path_to_key_folder\u0026gt;/ cyberdcli keys list --home=/\u0026lt;unique_path_to_key_folder\u0026gt;/  Set keyring backend to pass manager:\nPass utility uses a GPG key to encrypt your keys (but again, it uses the same GPG for all the keys). To install and generate your GPG key you should follow this guide or this very detailed guide. When you\u0026rsquo;ll get your pass set, configure cyberdcli to use it as a keyring backend:\ncyberdcli config keyring-backend pass  And verify that all has been set as planned:\ncyberdcli config --get keyring-backend pass  Send the create validator transaction Validators are actors on the network committing to new blocks by submitting their votes. This refers to the node itself, not a single person or a single account. Therefore, the public key here is referring to the nodes public key, not the public key of the address you have just created.\nTo get the nodes public key run the following command:\ncyberd tendermint show-validator  It will return a bech32 public key. Let’s call it . The next step is to declare a validator candidate. The validator candidate is the account which stakes the coins. So the validator candidate is the account this time. To declare a validator candidate, run the following command adjusting the staked amount and the other fields:\ncyberdcli tx staking create-validator \\ --amount=10000000eul \\ --min-self-delegation \u0026quot;1000000\u0026quot; \\ --pubkey=\u0026lt;your_node_pubkey\u0026gt; \\ --moniker=\u0026lt;your_node_nickname\u0026gt; \\ --trust-node \\ --from=\u0026lt;your_key_name\u0026gt; \\ --commission-rate=\u0026quot;0.10\u0026quot; \\ --commission-max-rate=\u0026quot;0.20\u0026quot; \\ --commission-max-change-rate=\u0026quot;0.01\u0026quot; \\ --chain-id=euler-6  Verify that you are validating cyberdcli query staking validators --trust-node=true  If you see your \u0026lt;your_node_nickname\u0026gt; with status Bonded and Jailed false, everything is good. You are validating the network.\nMaintenance of the validator Jailing If your validator got slashed, it will get jailed. If it happens the operator must unjail the validator manually:\ncyberdcli tx slashing unjail --from=\u0026lt;your_key_name\u0026gt; --chain-id euler-6  "
    },
    {
        "uri": "/docs/go-cyber/setup_cyberd_configuration/",
        "title": "",
        "description": "",
        "content": " Setup config.toml Correct configuration is one of the main keys to consistent and proper functioning of your node no matter if it is a validator or a sentinel/service node.\nThroughout this document, we will check all the key points of the config.toml file and explain how to configure them for all use-cases.\nWe will operate a basic configuration file (according to the number of the line in the actual file), generated after the initialization of cyber daemon and typically located inside $HOME/.cyberd/config directory.\n All changes made to the config.toml file, require to restart cyberd to take effect!\n Port / Address configuration RPC port First of all, let\u0026rsquo;s look through the ports cyberd uses to communicate with the outside world. On line 84 the specified port is used for an RPC server (TCP and UNIX websocket connections):\n# TCP or UNIX socket address for the RPC server to listen on laddr = \u0026quot;tcp://127.0.0.1:26657\u0026quot;  After the node starts the RPC server provides endpoints to check chain/node parameters, accepts $POST transactions and so on. It can be opened locally using your favourite browser via: http://localhost:26657.\n We do not recommend a validator node to open this port to the outside world, as it may allow anyone to produce transactions using your node and allows DOS attacks (you don\u0026rsquo;t want your validator attacked, right?). So let\u0026rsquo;s leave it like this:  laddr = \u0026quot;tcp://127.0.0.1:26657\u0026quot;   For Sentinel nodes this should be kept the same as for validators:  laddr = \u0026quot;tcp://127.0.0.1:26657\u0026quot;   For Service nodes, when use cases include remote access to the RPC for yourself or for your great service, it is allowable to expose it to the outside by using the following values:  laddr = \u0026quot;tcp://0.0.0.0:26657\u0026quot;  If you would like to make the RPC server respond on a different port, you may change this value to whatever you\u0026rsquo;d like (just make sure it will not cross with any of the other services), for example, to change it to 9588 use:\n# TCP or UNIX socket address for the RPC server to listen on laddr = \u0026quot;tcp://0.0.0.0:9588\u0026quot;  Cyberd communication port On line 163 we can find the following:\n# Address to listen for incoming connections laddr = \u0026quot;tcp://0.0.0.0:26656\u0026quot;  This is the way the node communicates with other nodes in the chain. For all possible cases(Validator, Sentinel, Service) leave it as default, bound to 0.0.0.0. And if you need to change the port number to something different like 35622 just use:\nladdr = \u0026quot;tcp://0.0.0.0:35622\u0026quot;  If changed, your node peer address would be changed accordingly: 75e8f44072b0dd598dfa95aaf9b5f2c60f956819@your_external_ip:35622.\nPrometheus collectors port On line 325 the port for Prometheus monitoring service is located:\n# Address to listen for Prometheus collector(s) connections prometheus_listen_addr = \u0026quot;:26660\u0026quot;  It is useful if you want to monitor remotely the condition of your node using the Prometheus metrics collector service and could be changed to whatever you like 23456:\nprometheus_listen_addr = \u0026quot;:23456\u0026quot;  Don\u0026rsquo;t forget to enable Prometheus metrics by changing to true on line 322, if needed:\n# When true, Prometheus metrics are served under /metrics on # PrometheusListenAddr. # Check out the documentation for the list of available metrics. prometheus = true  External address On line 169 you should find the following:\n# Address to advertise to peers for them to dial # If empty, will use the same port as the laddr, # and will introspect on the listener or use UPnP # to figure out the address. external_address = \u0026quot;\u0026quot;  This line implies specifying your external IP address, which means the presence of a static external address at your network connection. If you don\u0026rsquo;t have one, just skip it.\n For Validator nodes, you may skip it, until you have enough private peers to get synced with. Otherwise, you have to specify your external static IP to improve peer discovery for your node. Also, don\u0026rsquo;t forget to change the port according to line 163:  external_address = \u0026quot;tcp://\u0026lt;your_external_static_ip\u0026gt;:26656\u0026quot;   For Sentinel nodes it is a good idea to specify the IP for better peer discovery:  external_address = \u0026quot;tcp://\u0026lt;your_external_static_ip\u0026gt;:26656\u0026quot;   For Servie nodes this setting can be the same as for Sentinel nodes:  external_address = \u0026quot;tcp://\u0026lt;your_external_static_ip\u0026gt;:26656\u0026quot;  And again, all of the above settings apply to the cases when STATIC EXTERNAL IP is available.\nAllow duplicated IP\u0026rsquo;s Line 224 of the config.toml holds the following:\n# Toggle to disable guard against peers connecting from the same ip. allow_duplicate_ip = false  This variable configures the possibility for different peers to be connected from the same IP. Lets imagine a situation where you run 2 nodes (lets say that the node ID of the first one is: 75e8f44072b0dd598dfa95aaf9b5f2c60f956819 and the second one is: d0518ce9881a4b0c5872e5e9b7c4ea8d760dad3f) on one internet provider, with an external IP of 92.23.45.123. In this case, all other nodes in the network with allow_duplicate_ip = false will see attempts to connect from peers d0518ce9881a4b0c5872e5e9b7c4ea8d760dad3f@92.23.45.123:26656 and 75e8f44072b0dd598dfa95aaf9b5f2c60f956819@92.23.45.123:36656 and will block the one which comes last because the originating IP address is the same for both nodes. If this case applies to you, change this setting to the following:\n# Toggle to disable guard against peers connecting from the same ip. allow_duplicate_ip = true  P2P configuration Seed nodes On line 172 of the config.toml we see the following:\n# Comma separated list of seed nodes to connect to seeds = \u0026quot;\u0026quot;  This line is dedicated to the list of seed nodes you want to establish a connection with. To get seed nodes addresses take a look at our forum or ask on our Telegram chat.\n For validators with sentinel nodes or with a decent quantity of peers connected it is not required to fill it out:  seeds = \u0026quot;\u0026quot;   For Sentinel nodes and Service nodes it\u0026rsquo;s a good idea to fill it out with a couple of seed node addresses, separated with commas:  seeds = \u0026quot;\u0026lt;seed_node1_ID\u0026gt;@\u0026lt;seed_node1_ip\u0026gt;:\u0026lt;port\u0026gt;,\u0026lt;seed_node2_ID\u0026gt;@\u0026lt;seed_node2_ip\u0026gt;:\u0026lt;port\u0026gt;\u0026quot;  Persistent peers The place to add persistent peers is located on line 175. Presence of persistent peers is very important for the correct functioning of the node:\n# Comma separated list of nodes to keep persistent connections to persistent_peers = \u0026quot;\u0026quot;   For Validator nodes you have to fill out this line with a decent amount of peers you trust, otherwise, your validator node address will be exposed. In the perfect case scenario, you should add to this section only the addresses of your sentinel nodes:  persistent_peers =\u0026quot;\u0026lt;sentinel_node1_ID\u0026gt;@\u0026lt;sentinel_node1_ip\u0026gt;:\u0026lt;port\u0026gt;,\u0026lt;sentinel_node2_ID\u0026gt;@\u0026lt;sentinel_node2_ip\u0026gt;:\u0026lt;port\u0026gt;\u0026quot;   For Sentinel nodes and Service nodes add as many peers as possible to keep a persistent connection and network stability, but DO NOT put here you\u0026rsquo;r validator nodes ID\u0026rsquo;s:  persistent_peers =\u0026quot;\u0026lt;node1_ID\u0026gt;@\u0026lt;node1_ip\u0026gt;:\u0026lt;port\u0026gt;,\u0026lt;node2_ID\u0026gt;@\u0026lt;node2_ip\u0026gt;:\u0026lt;port\u0026gt;,...,\u0026lt;node_n_ID\u0026gt;@\u0026lt;node_n_ip\u0026gt;:\u0026lt;port\u0026gt;\u0026quot;  Peer Exchange Reactor Line 212 shows by default:\n# Set true to enable the peer-exchange reactor pex = true  This is a peer exchange module, which is responsible for exchanging node IDs across the network.\n For Validator nodes with Sentinel architecture set this to be disabled:  pex = false   For Sentinel nodes and Service nodes leave as default:  pex = true  Private peers ID\u0026rsquo;s On line 221 we see:\n# Comma separated list of peer IDs to keep private (will not be gossiped to other peers) private_peer_ids = \u0026quot;\u0026quot;  This is the list of peers which IDs should not gossip to others.\n For Validator nodes, leave as default:  private_peer_ids = \u0026quot;\u0026quot;  Or you may add your 2nd validator ID here (if you running more than 1 validator).\n For Sentinel nodes, add your validator/s address here:  private_peer_ids = \u0026quot;\u0026lt;validator_node_ID\u0026gt;@\u0026lt;validator_node_ip\u0026gt;:\u0026lt;port\u0026gt;\u0026quot;   For Service nodes leave blank:  private_peer_ids = \u0026quot;\u0026quot;  Node Index, Naming Indexed tags A node can index and store a decent amount of keys and values with regards to transactions, accounts etc. Lines 306 and 304 are responsible for this:\n# You can also index transactions by height by adding \u0026quot;tx.height\u0026quot; key here. # # It's recommended to index only a subset of keys due to possible memory # bloat. This is, of course, depends on the indexer's DB and the volume of # transactions. index_keys = \u0026quot;\u0026quot; # When set to true, tells indexer to index all compositeKeys (predefined keys: # \u0026quot;tx.hash\u0026quot;, \u0026quot;tx.height\u0026quot; and all keys from DeliverTx responses). # # Note this may be not desirable (see the comment above). IndexKeys has a # precedence over IndexAllKeys (i.e. when given both, IndexKeys will be # indexed). index_all_keys = false   For Validator and Sentinel nodes this is not necessary, so leave as default:  index_keys = \u0026quot;\u0026quot; index_all_keys = false   For Service nodes, you should specify a subset of keys you want to index:  index_keys = \u0026quot;tx.hash,tx.height,...etc..\u0026quot; index_all_keys = true  Naming To setup up your node moniker please refer to line 16 and type in whatever you want to have as moniker:\n# A custom human readable name for this node moniker = \u0026quot;god_damn_node\u0026quot;  "
    },
    {
        "uri": "/docs/go-cyber/setup_dev_env/",
        "title": "",
        "description": "",
        "content": " Setup development environment Prestart  Install Golang 1.11+ Install GoLand IDE  Import project to GoLand Open Project in GoLand by selecting: Open Project -\u0026gt; selecting cloned repository root folder Enable go mod package management Wait for dependency downloading and indexation\nAdd Run Configurations ###Add testnet configuration Add run configuration with GPU Notes about GPU dev environment TO DO  Add run configuration with CPU start --allow-search=true --compute-rank-on-gpu=false --home=./mytestnet/node0/cyberd  Add reset configuration Running Node Generate testnet Before node running, setup testnet with run configuration D TESTNET. - Folder /mytestnet will be added to the project root. - In /node0 subfolder you can find daemon and cli folders. - Daemon folder will contain validator node data. - In /cyberdcli folder you can find initial validator seed.\nmytestnet ├── gentxs │ └── node0.json └── node0 ├── cyberd │ ├── config │ │ ├── config.toml │ │ ├── genesis.json │ │ ├── node_key.json │ │ └── priv_validator_key.json │ └── data │ ├── priv_validator_state.json └── cyberdcli └── key_seed.json  Run with GPU or CPU After, just run RUN node configuration.\nI[2019-05-15|15:06:56.735] Starting ABCI with Tendermint module=main I[2019-05-15|15:06:56.789] Loading mem state module=main I[2019-05-15|15:06:56.789] App loaded module=main time=118.743µs I[2019-05-15|15:06:56.793] Search index loaded! module=main time=3.416449ms I[2019-05-15|15:06:56.793] Search index starting listen new links module=main I[2019-05-15|15:06:56.793] Search index starting listen new rank module=main I[2019-05-15|15:06:56.910] Applying genesis module=main I[2019-05-15|15:06:56.914] File with links not found. Empty set will be used module=main I[2019-05-15|15:06:56.914] Genesis applied module=main time=3.420262ms E[2019-05-15|15:06:56.947] Couldn't connect to any seeds module=p2p I[2019-05-15|15:07:02.014] Executed block module=state height=1 validTxs=0 invalidTxs=0 I[2019-05-15|15:07:02.014] Rank calculated module=main time=2.069µs links=0 cids=0 hash=e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 I[2019-05-15|15:07:02.047] Committed state module=state height=1 txs=0 appHash=E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855 I[2019-05-15|15:07:07.078] Executed block module=state height=2 validTxs=0 invalidTxs=0 I[2019-05-15|15:07:07.107] Committed state module=state height=2 txs=0 appHash=E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855 I[2019-05-15|15:07:12.113] Executed block module=state height=3 validTxs=0 invalidTxs=0 I[2019-05-15|15:07:12.144] Committed state module=state height=3 txs=0 appHash=E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855 I[2019-05-15|15:07:17.168] Executed block module=state height=4 validTxs=0 invalidTxs=0 I[2019-05-15|15:07:17.207] Committed state module=state height=4 txs=0 appHash=E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855  You may stop, and RUN again I[2019-05-15|14:48:58.191] Starting ABCI with Tendermint module=main I[2019-05-15|14:48:58.343] Loading mem state module=main I[2019-05-15|14:48:58.344] App loaded module=main time=929.472µs I[2019-05-15|14:48:58.399] Search index loaded! module=main time=16.928556ms I[2019-05-15|14:48:58.399] Search index starting listen new links module=main I[2019-05-15|14:48:58.399] Search index starting listen new rank module=main E[2019-05-15|14:48:58.638] Couldn't connect to any seeds module=p2p I[2019-05-15|14:49:03.716] Executed block module=state height=2032 validTxs=0 invalidTxs=0 I[2019-05-15|14:49:03.755] Committed state module=state height=2032 txs=0 appHash=1BAA91AD6FD9742B7B094204037F80A8174673BA0FF304D3FF5DFEEAF8FF7DDC I[2019-05-15|14:49:08.759] Executed block module=state height=2033 validTxs=0 invalidTxs=0 I[2019-05-15|14:49:08.793] Committed state module=state height=2033 txs=0 appHash=1BAA91AD6FD9742B7B094204037F80A8174673BA0FF304D3FF5DFEEAF8FF7DDC I[2019-05-15|14:49:13.826] Executed block module=state height=2034 validTxs=0 invalidTxs=0 I[2019-05-15|14:49:13.860] Committed state module=state height=2034 txs=0 appHash=1BAA91AD6FD9742B7B094204037F80A8174673BA0FF304D3FF5DFEEAF8FF7DDC  Reset You can reset chains data to genesis at any time by executing RESET run configuration\nI[2019-05-15|15:09:43.338] Removed existing address book module=main file=mytestnet/node0/cyberd/config/addrbook.json I[2019-05-15|15:09:43.345] Removed all blockchain history module=main dir=mytestnet/node0/cyberd/data I[2019-05-15|15:09:43.347] Reset private validator file to genesis state module=main keyFile=mytestnet/node0/cyberd/config/priv_validator_key.json stateFile=mytestnet/node0/cyberd/data/priv_validator_state.json  Exploring Guide to all commands you may to research here: Ultimate cyberd CLI guide\nBefore, build cyberd cli: go build -o cyberdcli ./cli  You will get cyberdcli into you project root\nAdd keys: ./cyberdcli keys add validator --recover  Enter and you protection password-passphrase and mnemocic from file mytestnet/node0/cyberdcli/key_seed.json\n Enter a passphrase to encrypt your key to disk: Repeat the passphrase: \u0026gt; Enter your bip39 mnemonic inhale enforce brand fever core smart draft ceiling among cluster orbit robust tonight elephant below twice goat update uncover employ spider brass consider shiver NAME: TYPE: ADDRESS: PUBKEY: validator local cyber18l4v00ar4xsgzc4rr40tfctcjgyp7ppwysdcns cyberpub1addwnpepq0zm06twxtf7ezv4nj9dhud9ds0fnhkks6qw4g8pdwxzh3evggpvvksh60l  Query status: ./cyberdcli status --indent  { \u0026quot;node_info\u0026quot;: { \u0026quot;protocol_version\u0026quot;: { \u0026quot;p2p\u0026quot;: \u0026quot;7\u0026quot;, \u0026quot;block\u0026quot;: \u0026quot;10\u0026quot;, \u0026quot;app\u0026quot;: \u0026quot;0\u0026quot; }, \u0026quot;id\u0026quot;: \u0026quot;b99f3254757310d1f470f5cd0331b766f2a843f9\u0026quot;, \u0026quot;listen_addr\u0026quot;: \u0026quot;tcp://0.0.0.0:26656\u0026quot;, \u0026quot;network\u0026quot;: \u0026quot;chain-K6U4uZ\u0026quot;, \u0026quot;version\u0026quot;: \u0026quot;0.30.1\u0026quot;, \u0026quot;channels\u0026quot;: \u0026quot;4020212223303800\u0026quot;, \u0026quot;moniker\u0026quot;: \u0026quot;node0\u0026quot;, \u0026quot;other\u0026quot;: { \u0026quot;tx_index\u0026quot;: \u0026quot;on\u0026quot;, \u0026quot;rpc_address\u0026quot;: \u0026quot;tcp://0.0.0.0:26657\u0026quot; } }, \u0026quot;sync_info\u0026quot;: { \u0026quot;latest_block_hash\u0026quot;: \u0026quot;8059683636349AF9237FABFD147BAD89C7188571E37E8F09356B1837A88337BA\u0026quot;, \u0026quot;latest_app_hash\u0026quot;: \u0026quot;E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855\u0026quot;, \u0026quot;latest_block_height\u0026quot;: \u0026quot;134\u0026quot;, \u0026quot;latest_block_time\u0026quot;: \u0026quot;2019-05-15T09:04:31.768026Z\u0026quot;, \u0026quot;catching_up\u0026quot;: false }, \u0026quot;validator_info\u0026quot;: { \u0026quot;address\u0026quot;: \u0026quot;9C2C13F2B6608BF00BADF501A04E728AC5FF7ADC\u0026quot;, \u0026quot;pub_key\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;tendermint/PubKeyEd25519\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;or7X/1BYcGE1cVX5e3vG9G76JPfXZDKTDg8YL3vtKzo=\u0026quot; }, \u0026quot;voting_power\u0026quot;: \u0026quot;10000000000\u0026quot; } }  Query balance: ./cyberdcli query account cyber18l4v00ar4xsgzc4rr40tfctcjgyp7ppwysdcns  Account: Address: cyber18l4v00ar4xsgzc4rr40tfctcjgyp7ppwysdcns Pubkey: cyberpub1addwnpepq0zm06twxtf7ezv4nj9dhud9ds0fnhkks6qw4g8pdwxzh3evggpvvksh60l Coins: 10000000000000000cyb AccountNumber: 0 Sequence: 1  Query validators: ./cyberdcli query staking validators  Validator Operator Address: cybervaloper18l4v00ar4xsgzc4rr40tfctcjgyp7ppwy3lgak Validator Consensus Pubkey: cybervalconspub1zcjduepq52ld0l6stpcxzdt32huhk77x73h05f8h6ajr9ycwpuvz77ld9vaq6ka2zl Jailed: false Status: Bonded Tokens: 10000000000000000 Delegator Shares: 10000000000000000.000000000000000000 Description: {node0 tst com.com det} Unbonding Height: 0 Unbonding Completion Time: 1970-01-01 00:00:00 +0000 UTC Minimum Self Delegation: 1 Commission: rate: 0.000000000000000000, maxRate: 0.000000000000000000, maxChangeRate: 0.000000000000000000, updateTime: 2019-05-15 08:52:36.324624 +0000 UTC  Add links ./cyberdcli link --from=validator --cid-from=QmbTARMsUw9X2ZEbBaFXRu9JEqNN2g4VZ6DPgtgZH1opy9 --cid-to=QmNWkR2v4ZEzT43xiNKJcFPkFQioGbhqsWcE5qayWQHXAo --chain-id=chain-K6U4uZ ./cyberdcli link --from=validator --cid-from=QmbTARMsUw9X2ZEbBaFXRu9JEqNN2g4VZ6DPgtgZH1opy9 --cid-to=Qmd7AaekFAxXedSQx3B3h8Wc5aeYPYRiYF83Vjb4tVLkMM --chain-id=chain-K6U4uZ ./cyberdcli link --from=validator --cid-from=QmbTARMsUw9X2ZEbBaFXRu9JEqNN2g4VZ6DPgtgZH1opy9 --cid-to=QmfSh5obPXmkaTd9aaNCYWxnKHZTH6EYeEh7Hq7xgGnRVy --chain-id=chain-K6U4uZ  {\u0026quot;chain_id\u0026quot;:\u0026quot;chain-K6U4uZ\u0026quot;,\u0026quot;account_number\u0026quot;:\u0026quot;0\u0026quot;,\u0026quot;sequence\u0026quot;:\u0026quot;1\u0026quot;,\u0026quot;fee\u0026quot;:{\u0026quot;amount\u0026quot;:null,\u0026quot;gas\u0026quot;:\u0026quot;200000\u0026quot;},\u0026quot;msgs\u0026quot;:[{\u0026quot;type\u0026quot;:\u0026quot;cyberd/Link\u0026quot;,\u0026quot;value\u0026quot;:{\u0026quot;address\u0026quot;:\u0026quot;cyber18l4v00ar4xsgzc4rr40tfctcjgyp7ppwysdcns\u0026quot;,\u0026quot;links\u0026quot;:[{\u0026quot;from\u0026quot;:\u0026quot;QmbTARMsUw9X2ZEbBaFXRu9JEqNN2g4VZ6DPgtgZH1opy9\u0026quot;,\u0026quot;to\u0026quot;:\u0026quot;QmNWkR2v4ZEzT43xiNKJcFPkFQioGbhqsWcE5qayWQHXAo\u0026quot;}]}}],\u0026quot;memo\u0026quot;:\u0026quot;\u0026quot;} confirm transaction before signing and broadcasting [Y/n]: Y Password to sign with 'validator': Response: Height: 1720 TxHash: 68C4F6389D36747A6A609CCDD9D44027A5234850FF065C78D1B1AB3FAC421541 Logs: [{\u0026quot;msg_index\u0026quot;:0,\u0026quot;success\u0026quot;:true,\u0026quot;log\u0026quot;:\u0026quot;\u0026quot;}] GasUsed: 31368 Tags: - action = link  Search and get links with rank: curl -X GET 'localhost:26657/search?cid=\u0026quot;QmbTARMsUw9X2ZEbBaFXRu9JEqNN2g4VZ6DPgtgZH1opy9\u0026quot;'  Links added, rank for them will be computed at next round: { \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;result\u0026quot;: { \u0026quot;cids\u0026quot;: [ { \u0026quot;cid\u0026quot;: \u0026quot;QmNWkR2v4ZEzT43xiNKJcFPkFQioGbhqsWcE5qayWQHXAo\u0026quot;, \u0026quot;rank\u0026quot;: 0 }, { \u0026quot;cid\u0026quot;: \u0026quot;Qmd7AaekFAxXedSQx3B3h8Wc5aeYPYRiYF83Vjb4tVLkMM\u0026quot;, \u0026quot;rank\u0026quot;: 0 }, { \u0026quot;cid\u0026quot;: \u0026quot;QmfSh5obPXmkaTd9aaNCYWxnKHZTH6EYeEh7Hq7xgGnRVy\u0026quot;, \u0026quot;rank\u0026quot;: 0 } ], \u0026quot;total\u0026quot;: \u0026quot;3\u0026quot;, \u0026quot;page\u0026quot;: \u0026quot;0\u0026quot;, \u0026quot;perPage\u0026quot;: \u0026quot;100\u0026quot; } }%  When rank computed: { \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;result\u0026quot;: { \u0026quot;cids\u0026quot;: [ { \u0026quot;cid\u0026quot;: \u0026quot;QmNWkR2v4ZEzT43xiNKJcFPkFQioGbhqsWcE5qayWQHXAo\u0026quot;, \u0026quot;rank\u0026quot;: 0.056093750000000005 }, { \u0026quot;cid\u0026quot;: \u0026quot;Qmd7AaekFAxXedSQx3B3h8Wc5aeYPYRiYF83Vjb4tVLkMM\u0026quot;, \u0026quot;rank\u0026quot;: 0.056093750000000005 }, { \u0026quot;cid\u0026quot;: \u0026quot;QmfSh5obPXmkaTd9aaNCYWxnKHZTH6EYeEh7Hq7xgGnRVy\u0026quot;, \u0026quot;rank\u0026quot;: 0.056093750000000005 } ], \u0026quot;total\u0026quot;: \u0026quot;3\u0026quot;, \u0026quot;page\u0026quot;: \u0026quot;0\u0026quot;, \u0026quot;perPage\u0026quot;: \u0026quot;100\u0026quot; } }  #fuckgoogle "
    },
    {
        "uri": "/docs/go-cyber/supported_gpu_list/",
        "title": "",
        "description": "",
        "content": " Supported GPU list for cyberd validators In our cyber protocol implementation on GO proof of relevance root hash is computed on Cuda GPUs every round as the best way to calculate merkle tree faster. We need to load the whole graph in memory for calculating that\u0026rsquo;s why memory volume is important. GPU with 6Gb memory can calculate graph with ~200 M links.\n   GPU Supported Tested CUDA cores Memory Year of production     GEFORCE RTX 2080 Ti ✅ ❌ 4352 11GB GDDR 6 2018   GEFORCE RTX 2080 ✅ ❌ 4352 11GB GDDR 6 2018   GEFORCE RTX 2070 ✅ ❌ 2304 8 GB GDDR6 2019   GeForce RTX 2060 ✅ ❌ 1920 6 GB GDDR6 2019   GEFORCE GTX 1660 Ti ✅ ❌ 1536 6GB GDDR6 2019   GEFORCE GTX 1660 ✅ ❌ 1408 6GB GDDR5 2019   GEFORCE GTX 1650 ✅ ✅ 896 4GB GDDR5 2019   GeForce GTX 1080 ✅ ✅ 2560 8 GB GDDR5X 2016   GeForce GTX 980 ✅ ❌ 2048 4 GB GDDR5 2014   TITAN Xp ✅ ❌ 3840 12 GB GDDR5 2017   GeForce GTX 1080 Ti ✅ ❌ 3584 11 GB GDDR5X 2017   GeForce GTX 980 Ti ✅ ❌ 2816 6 GB GDDR5 2015   GeForce GTX 1070 Ti ✅ ✅ 2432 8 GB GDDR5 2017   GeForce GTX 1070 ✅ ✅ 1920 8 GB GDDR5 2016   GeForce GTX 970 ✅ ❌ 1664 4 GB GDDR5 2015   GEFORCE GTX 1060 6GB ✅ ✅ 1280 6 GB GDDR5 2016   GeForce GTX 1050 Ti 4GB ✅ ❌ 768 4 GB GDDR5 2016   GeForce GTX 745 (OEM) 4GB ✅ ❌ 768 4 GB GDDR3 2014   GeForce GTX TITAN X ✅ ❌ 3072 12 GB GDDR5 2016   GeForce GTX TITAN Z ✅ ❌ 5760 12 GB GDDR5 2014   GeForce GTX TITAN Black ✅ ❌ 2880 6 GB GDDR5 2014   GeForce GTX 770 ✅ ❌ 1536 4 GB GDDR5 2013    If you have used some GPU from column supported but without ✅ at tested column please submit a pull request with corrections. If you have tested GPU and it\u0026rsquo;s not contained in that list submit PR too.\nNote If you using some old cards (like GTX 770, or older) make sure your card will be supported by al least v.410 of NVIDIA diver for Linux.\n"
    },
    {
        "uri": "/docs/go-cyber/ultimate-commands-guide/",
        "title": "",
        "description": "",
        "content": " Ultimate cyberd CLI guide. Chain: euler-6 Install cyberd client It is possible to interact with cyber even if you don\u0026rsquo;t have your own node. All you need to do is install cyberdcli on your machine using the script below (just paste it in the console):\nbash \u0026lt; \u0026lt;(curl -s https://raw.githubusercontent.com/cybercongress/go-cyber/master/scripts/install_cyberdcli_v0.1.6.sh)  To start using the client without an own node, you have to configure some parameter Such as: key storage, connetion to a remote node, etc.\nAfter installation you will be able to use cyberdcli to import accounts, create links or, for example, run a validator.\nFirst of all, I would like to encourage you to use the --help feature if you want to get a better experience of using cyberdcli. This is a really easy way to find all the necessary commands with the appropriate options and flags.\nFor example, you can enter:\ncyberdcli --help  You should see this message:\nCommand line interface for interacting with cyberd Usage: cyberdcli [command] Available Commands: status Query remote node for status config Create or query an application CLI configuration file query Querying subcommands tx Transactions subcommands rest-server Start LCD (light-client daemon), a local REST server keys Add or view local private keys version Print the app version link Create and sign a link tx help Help about any command Flags: --chain-id string Chain ID of tendermint node -e, --encoding string Binary encoding (hex|b64|btc) (default \u0026quot;hex\u0026quot;) -h, --help help for cyberdcli --home string directory for config and data (default \u0026quot;/root/.cyberdcli\u0026quot;) -o, --output string Output format (text|json) (default \u0026quot;text\u0026quot;) --trace print out full stack trace on errors  The help feature works like a pyramid, you can use it with any command to find available options, subcommands and flags. For example, lets explore the query subcommands:\ncyberdcli query --help  You can see the structure of the subcommand:\nUsage: cyberdcli query [command]  And the available subcommands and flags:\nAvailable Commands: account Query account balance tendermint-validator-set Get the full tendermint validator set at given height block Get verified data for a the block at given height txs Query for paginated transactions that match a set of tags tx Query for a transaction by hash in a committed block staking Querying commands for the staking module slashing Querying commands for the slashing module supply Querying commands for the supply module bandwidth Querying commands for the bandwidth module auth Querying commands for the auth module mint Querying commands for the minting module distribution Querying commands for the distribution module gov Querying commands for the governance module rank Querying commands for the rank module Flags: -h, --help help for query Global Flags: --chain-id string Chain ID of tendermint node -e, --encoding string Binary encoding (hex|b64|btc) (default \u0026quot;hex\u0026quot;) --home string directory for config and data (default \u0026quot;/root/.cyberdcli\u0026quot;) -o, --output string Output format (text|json) (default \u0026quot;text\u0026quot;) --trace print out full stack trace on errors  Let\u0026rsquo;s explore the account subcommand:\ncyberdcli query account --help  We can see all of the options available for this subcommands, namely, account address and flags:\nUsage: cyberdcli query account [address] [flags]  In most cases you will need just two extra flags:\n--from \u0026lt;your_key_name\u0026gt; \\ --chain-id euler-6  That\u0026rsquo;s it. This is a very useful tool for using cyberdcli and troubleshooting.\nGlossary Bandwidth - The recovered unit of your account. Used to complete transactions in the cyber blockchain. The amount of your bandwidth calculates like:\nyour_eul_tokens / all_eul_tokens_in_cyber * 2000*1000*100.\nMessages cost is 100 (exclude link). Transaction consists of one or more messages m_1, m_2, ..., m_n. Transaction cost is 300 + c_1 + c_2 ... + c_n, where c_i - cost of m_i message. Full bandwidth regeneration time is 16000 blocks ( ~24 hours ). All bandwith prices, as well as other parameters could be found in our launch kit.\ncommission - The tokens that you\u0026rsquo;ve earned via validating from delegators. You may take them at any time\nilliquid tokens - Non-transferable tokens that you\u0026rsquo;ve delegated to the validator. Delegation process duration: 1 block\nHero - A validator node\nUnbonding - The process of taking back your share (delegated tokens + any rewards). 5 days (for euler-6 only)\nLedger - A hardware wallet\nlink - A reference between a CID key and a CID value. Link message cost is 100*n, where n is the number of links in a message. Link finalization time is 1 block. New rank for CIDs of links will be recalculated at a period of 100 to 200 blocks (from 100 to 200 seconds)\nliquid tokens - Transferable tokens within the cyber blockchain\nlocal keystore - A store with keys on your local machine\nrewards - Tokens that you\u0026rsquo;ve earned via delegation. To reduce network load all the rewards are stored in a pool. You can take your part of the bounty at any time with commands from the delegator section.\n - The commission that a validator gets for their work. Must be a fraction \u0026gt;0 and \u0026lt;=1\n - Delegator address. Starts with cyber most often coinciding with \n - An account address. Starts with cyber\n - The name of the account in cybercli\n - Validator address. Starts with cybervaloper\n - The part of illiquid tokens that you want to unbond or redelegate. Must be a fraction \u0026gt;0 and \u0026lt;=1\n - The current version of the testnet (current, euler-6).\nGeneral commands Show all validators Return the set of all active and jailed validators:\ncyberdcli query staking validators --trust-node  Show chain status Return general chain information:\ncyberdcli status --indent  Distribution params cyberdcli query distribution params --trust-node  The number of outstanding rewards for a validator Return the sum of outstanding rewards for a validator:\ncyberdcli query distribution validator-outstanding-rewards \u0026lt;operator_address\u0026gt; --trust-node  Staking params Chain staking info:\ncyberdcli query staking params --trust-node  Staking pool cyberdcli query staking pool --trust-node  Account management Don\u0026rsquo;t have an account? Check out if you have a gift allocated to you!\nImport an account with a seed phrase and store it in the local keystore cyberdcli keys add \u0026lt;your_key_name\u0026gt; --recover  Import an account with a private key and store it in the local keystore (private key could be your ETH private key) cyberdcli keys add private \u0026lt;your_key_name\u0026gt;  Create a new account cyberdcli keys add \u0026lt;your_key_name\u0026gt;  Show account information Name, address and the public key of the current account\ncyberdcli keys show \u0026lt;your_key_name\u0026gt;  Show account balance Return account number and amount of tokens.\ncyberdcli query account \u0026lt;your_key_address\u0026gt;  List existing keys Return all the existing keys in cyberdcli:\ncyberdcli keys list  Delete account from cybercli cyberdcli keys delete \u0026lt;deleting_key_name\u0026gt;  Keyring manipulation settings Important note: Starting with v.38, Cosmos-SDK uses os-native keyring to store all of your keys. We\u0026rsquo;ve noticed that in certain cases it does not work well by default (for example if you don\u0026rsquo;t have any GUI installed on your machine). If during the execution cyberdcli keys add command, you are getting this type of error:\npanic: No such interface 'org.freedesktop.DBus.Properties' on object at path / goroutine 1 [running]: github.com/cosmos/cosmos-sdk/crypto/keys.keyringKeybase.writeInfo(0x1307a18, 0x1307a10, 0xc000b37160, 0x1, 0x1, 0xc000b37170, 0x1, 0x1, 0x147a6c0, 0xc000f1c780, ...) /root/go/pkg/mod/github.com/cosmos/cosmos-sdk@v0.38.1/crypto/keys/keyring.go:479 +0x38c github.com/cosmos/cosmos-sdk/crypto/keys.keyringKeybase.writeLocalKey(0x1307a18, 0x1307a10, 0xc000b37160, 0x1, 0x1, 0xc000b37170, 0x1, 0x1, 0x147a6c0, 0xc000f1c780, ...) /root/go/pkg/mod/github.com/cosmos/cosmos-sdk@v0.38.1/crypto/keys/keyring.go:465 +0x189 github.com/cosmos/cosmos-sdk/crypto/keys.baseKeybase.CreateAccount(0x1307a18, 0x1307a10, 0xc000b37160, 0x1, 0x1, 0xc000b37170, 0x1, 0x1, 0x146aa00, 0xc000b15630, ...) /root/go/pkg/mod/github.com/cosmos/cosmos-sdk@v0.38.1/crypto/keys/keybase_base.go:171 +0x192 github.com/cosmos/cosmos-sdk/crypto/keys.keyringKeybase.CreateAccount(...) /root/go/pkg/mod/github.com/cosmos/cosmos-sdk@v0.38.1/crypto/keys/keyring.go:107 github.com/cosmos/cosmos-sdk/client/keys.RunAddCmd(0xc000f0b400, 0xc000f125f0, 0x1, 0x1, 0x148dcc0, 0xc000aca550, 0xc000ea75c0, 0xc000ae1c08, 0x5e93b7) /root/go/pkg/mod/github.com/cosmos/cosmos-sdk@v0.38.1/client/keys/add.go:273 +0xa8b ... etc  You will have to use another keyring backend to keep your keys. Here are 2 options: store the files within the cli folder or a pass manager.\nSetting keyring backend to a local file:\nExecute:\ncyberdcli config keyring-backend file  As a result you migth see the following: configuration saved to /root/.cybercli/config/config.toml\nExecute:\ncyberdcli config --get keyring-backend  The result should be the following:\nuser@node:~# cyberdcli config --get keyring-backend file  That means that you\u0026rsquo;ve set your keyring-backend to a local file. Note, in this case, all the keys in your keyring will be encrypted using the same password. If you would like to set up a unique password for each key, you should set a unique --home folder for each key. To do that, just use --home=/\u0026lt;unique_path_to_key_folder\u0026gt;/ with setup keyring backend and at all interactions with keys when using cyberdcli:\ncyberdcli config keyring-backend file --home=/\u0026lt;unique_path_to_key_folder\u0026gt;/ cyberdcli keys add \u0026lt;your_second_key_name\u0026gt; --home=/\u0026lt;unique_path_to_key_folder\u0026gt;/ cyberdcli keys list --home=/\u0026lt;unique_path_to_key_folder\u0026gt;/  Set keyring backend to pass manager:\nPass utility uses a GPG key to encrypt your keys (but again, it uses the same GPG for all the keys). To install and generate your GPG key you should follow this guide or this very detailed guide. When you\u0026rsquo;ll get your pass set, configure cyberdcli to use it as a keyring backend:\ncyberdcli config keyring-backend pass  Verify that all of the settings went as planned:\ncyberdcli config --get keyring-backend pass  Usefull client configuration There\u0026rsquo;s some hints you may configure to simplify you interaction with client. To see all possible parameters of those hints just run:\ncyberdcli config --help  And here\u0026rsquo;s what you can configure:\nCreate or query an application CLI configuration file Usage: cybercli config \u0026lt;key\u0026gt; [value] [flags] Flags: --get print configuration value or its default if unset -h, --help help for config Global Flags: --chain-id string Chain ID of tendermint node -e, --encoding string Binary encoding (hex|b64|btc) (default \u0026quot;hex\u0026quot;) --home string directory for config and data (default \u0026quot;/Users/mr_laptanovi4/.cybercli\u0026quot;) -o, --output string Output format (text|json) (default \u0026quot;text\u0026quot;) --trace print out full stack trace on errors  First of all, if you using a standalone client, it is a good idea to set up an address of a node to process all of your transactions. To do this use:\ncyberdcli config node \u0026lt;http://node_address:port\u0026gt;  We provide a public API address: http://titan.cybernode.ai:26657.\n TO DO add a new address for public API\n It will be useful to configure the chain-id to avoid entering it every time:\ncyberd config chain-id euler-6  If you are having trouble with the key storage, you may want to save your home directory for your cli:\ncyberdcli config --home /path_to_cli_home/.cybercli/  To check what is the current setup for any parameter run:\ncyberdcli config --get \u0026lt;parameter_name\u0026gt;  Send tokens cyberdcli tx send \u0026lt;from_key_or_address\u0026gt; \u0026lt;to_address\u0026gt; \u0026lt;amount_eul\u0026gt; --chain-id euler-6  Linking content  Only IPFS hashes are available to use as CIDs\n cyberdcli link \\ --from=\u0026lt;your_key_name\u0026gt; \\ --cid-from=\u0026lt;key_phrase_to_link\u0026gt; \\ --cid-to=\u0026lt;content_that_you_want_to_link\u0026gt; \\ --chain-id=euler-6  The cid-from is the IPFS hash of the keyword that you want to make searchable. Example of a link command:\ncyberdcli link --cid-from QmWDYzTXarWYy9UKC7Ro4xMCdSVseQPbmdnmTYsJ9zGTpK --cid-to QmVgxX3TVntSNRiQ1Kd8sE8zvEKkbEgb8PaMnA4N7w7pK3 --from fuckgoogle --chain-id euler-6 --yes  Validator commands Get all validators cyberdcli query staking validators --trust-node  The amount of commission The commission available to withdraw for a validator:\ncyberdcli query distribution commission \u0026lt;operator_address\u0026gt;  State of a current validator docker exec eiler-5 cyberdcli query staking validator \u0026lt;operator_address\u0026gt;  Return all delegations to a validator cyberdcli query staking delegations-to \u0026lt;operator_address\u0026gt;  Edit the commission in an existing validator account cyberdcli tx staking edit-validator \\ --from=\u0026lt;your_key_name\u0026gt; \\ --commission-rate=\u0026lt;new_comission_rate_percentage\u0026gt; \\ --chain-id=euler-6  Withdraw the commission for any delegation cyberdcli tx distribution withdraw-rewards \u0026lt;operator_address\u0026gt; \\ --from=\u0026lt;your_key_name\u0026gt; \\ --chain-id=euler-6 \\ --commission  Edit the site and description for an existing validator account cyberdcli tx staking edit-validator \\ --from=\u0026lt;your_key_name\u0026gt; \\ --details=\u0026quot;\u0026lt;description\u0026gt;\u0026quot; \\ --website=\u0026lt;your_website\u0026gt; \\ --chain-id=euler-6  Unjail a validator previously jailed for downtime cyberdcli tx slashing unjail --from=\u0026lt;your_key_name\u0026gt; --chain-id=euler-6  Get info about a redelegation process from a validator cyberdcli query staking redelegations-from \u0026lt;operator_address\u0026gt;  Delegator commands Return distribution delegator rewards for a specified validator cyberdcli query distribution rewards \u0026lt;delegator_address\u0026gt; \u0026lt;operator_address\u0026gt;  Return delegator shares for the specified validator cyberdcli query staking delegation \u0026lt;delegator_address\u0026gt; \u0026lt;operator_address\u0026gt;  Return all of the delegations made from a delegator cyberdcli query staking delegations \u0026lt;delegator_address\u0026gt;  Return all unbonding delegations from a validator cyberdcli query staking unbonding-delegations-from \u0026lt;operator_address\u0026gt;  Withdraw rewards for any delegation cyberdcli tx distribution withdraw-rewards \u0026lt;operator_address\u0026gt; \\ --from=\u0026lt;your_key_name\u0026gt; \\ --chain-id=euler-6  Withdraw all delegation rewards cyberdcli tx distribution withdraw-all-rewards \\ --from=\u0026lt;your_key_name\u0026gt; \\ --chain-id=euler-6  Change the default withdrawal address for rewards associated with an address cyberdcli tx distribution set-withdraw-addr \u0026lt;your_new_address\u0026gt; \\ --from=\u0026lt;your_key_name\u0026gt; \\ --chain-id=euler-6  Delegate liquid tokens to a validator cyberdcli tx staking delegate \u0026lt;operator_address\u0026gt; \u0026lt;amount_cyb\u0026gt; \\ --from=\u0026lt;your_key_name\u0026gt; \\ --chain-id=euler-6  Redelegate illiquid tokens from one validator to another in absolute cyb value  There is a 5-day unbonding period\n cyberdcli tx staking redelegate \u0026lt;old_operator_address\u0026gt; \u0026lt;new_operator_address\u0026gt; \u0026lt;amount_cyb\u0026gt; --from=\u0026lt;your_key_name\u0026gt; --chain-id=euler-6  Redelegate illiquid tokens from one validator to another in percentages cyberdcli tx staking redelegate \u0026lt;old_operator_address\u0026gt; \u0026lt;new_operator_address\u0026gt; \u0026lt;shares_percentage\u0026gt; --from=\u0026lt;your_key_name\u0026gt; \\ --chain-id=euler-6  Unbond shares from a validator in absolute cyb value  5 days for unbonding\n cyberdcli tx staking unbond \u0026lt;operator_address\u0026gt; \u0026lt;amount_cyb\u0026gt; --from=\u0026lt;your_key_name\u0026gt; \\ --chain-id=euler-6  Unbond shares from a validator in percentages  5 days for unbonding\n cyberdcli tx staking unbond \u0026lt;operator_address\u0026gt; \u0026lt;shares_percentage\u0026gt; --from=\u0026lt;your_key_name\u0026gt; \\ --chain-id=euler-6  Get info about the unbonding delegation process to any validator cyberdcli query staking unbonding-delegation \u0026lt;delegator_address\u0026gt; \u0026lt;operator_address\u0026gt;  Get info about the unbonding delegation process to all unbonded validators cyberdcli query staking unbonding-delegation \u0026lt;delegator_address\u0026gt;  Get info about redelegation process from to current validator cyberdcli query staking redelegation \u0026lt;delegator_address\u0026gt; \u0026lt;old_operator_address\u0026gt; \u0026lt;new_operator_address\u0026gt;  Get the info about all the redelegation processes by a delegator cyberdcli query staking redelegations \u0026lt;delegator_address\u0026gt;  "
    },
    {
        "uri": "/docs/go-cyber/validator_launch_with_tendermintkms_and_ledger/",
        "title": "",
        "description": "",
        "content": " Validator launch with Tendermint KMS + Leger Nano In this guide, you\u0026rsquo;ll find the full information on how to set up your validator at cyberd by using Tenderming KMS and Ledger nano S as a keystore.\nPreparing your Ledger We assume you have one. If not, only buy them from trusted sources!\nFirst of all, we\u0026rsquo;ll need to prepare the Ledger to be able to work with Tendermint KMS. We need to install the Tendermint app onto the Ledger using Ledger Live.\nNote: at the moment, you might need to enable the developer mode in Ledger Live settings\nIf you have (initially) set up your Ledger on a different machine than the one with cyberd, you should make sure that the Ledger device is recognized by Legder Live. The best way to do this is by installing Ledger Live onto that particular machine and attempting to connect the Ledger device to it. This will show any possible issues or/and error codes (if they exist, of course). To deal with them, please use the Fix connection issues guide from Ledger.\nInstalling Tendermint KMS onto the node Normally, this has to be done according to the Tendermint guide, but we will need a few extras (all instructions have been tested on KMS v0.6.3).\nInstallation You will need the following prerequisites:\n Rust (stable; 1.35+) install C compiler: e.g. gcc, clang pkg-config libusb (1.0+) : for Debian/Ubuntu: apt install libusb-1.0-0-dev  NOTE (x86_64 only): Configure RUSTFLAGS environment variable: export RUSTFLAGS=-Ctarget-feature=+aes,+ssse3 (generally it would be necessary to add these flags to ~/.bash-profile or ~/.profile to make them available after re-login).\nWe are ready to install KMS. There are 2 ways to do this: compile from source or install with Rusts cargo-install. We\u0026rsquo;ll use the first option.\nCompiling from source code tmkms can be compiled directly from the git repository source code, using the following commands:\ngit clone https://github.com/tendermint/kms.git \u0026amp;\u0026amp; cd kms cargo build --release --features=ledgertm,softsign  If successful, it will produce the tmkms executable located at: ./target/release/tmkms.\nKMS configuration After compiling, we should create a settings file - tmkms.toml, the secret_connection.key file and adjust cyberd node settings.\nFirst of all, we need to generate a connection key that will be used for communication with the Ledger device. In order to do this cd to the directory with tmkms executable and run the following (path to save the file is optional):\ncd \u0026lt;your_KMS_directory\u0026gt;/target/release/ ./tmkms softsign keygen ~/.tmkms/secret_connection.key  Once you are done with the connection key, proceed to the config file. It could be created anywhere. It is possible to specify the path to it during tmkms launch.\nHere is an example of the tmkms.toml config file, working with v0.6.3 of KMS:\n[[chain]] id = \u0026quot;\u0026lt;current_chain_id\u0026gt;\u0026quot; key_format = { type = \u0026quot;bech32\u0026quot;, account_key_prefix = \u0026quot;cyberpub\u0026quot;, consensus_key_prefix = \u0026quot;cybervalconspub\u0026quot; } ## Validator configuration [[validator]] addr = \u0026quot;tcp://localhost:26658\u0026quot; chain_id = \u0026quot;\u0026lt;current_chain_id\u0026gt;\u0026quot; reconnect = true # true is the default secret_key = \u0026quot;\u0026lt;path_to_secret_connection.key\u0026gt;\u0026quot; # enable the `ledger` feature [[providers.ledgertm]] chain_ids = [\u0026quot;\u0026lt;current_chain_id\u0026gt;\u0026quot;]  Retrieve the validator key The last step is to retrieve the validator key that you will be using in cyberd. The Ledger device must be connected, unlocked and has the Tendermint app opened on it.\nStart tmkms with the following command:\ntmkms start -c ~/.tmkms/tmkms.toml  The output should look something like this:\n13:28:35 [info] tmkms 0.6.3 starting up... 13:28:35 [info] [keyring:ledgertm] added consensus key cybervalconspub1zcjduepq8jv0uxx2fw4ur6gj2r3wgs374n6ys5edh9pc4rseqqcaq2yyzy2q0fhx5q 13:28:35 [info] KMS node ID: C0E0DBA8AA82D597E8F893993E66398DDE8F89B0  KMS may complain about the impossibility to connect to cyberd. That\u0026rsquo;s fine, we\u0026rsquo;ll fix this in the next section.\nThe output indicates the validator key that is linked to this particular device:\ncybervalconspub1zcjduepq8jv0uxx2fw4ur6gj2r3wgs374n6ys5edh9pc4rseqqcaq2yyzy2q0fhx5q  Take note of the validator pubkey that appears on your screen. We will use it in the next section.\nConfiguration of Cyberd Before we start validating, it\u0026rsquo;s necessary to enanble a communication port at cyberd itself. In the config file: \u0026lt;your_cyberd_location\u0026gt;/cyberd/config/config.toml, modify the priv_validator_laddr value to create a listening address/port. The port should be set according with the [[validator]] addr = value of your tmkms.toml file.\nExample of config.toml:\n# TCP or UNIX socket address for Tendermint to listen on for # connections from an external PrivValidator process priv_validator_laddr = \u0026quot;tcp://127.0.0.1:26658\u0026quot;  NOTE: if you will try to launch cyberd after enabling priv_validator_laddr, and without the tmkms app running simultaneously, it will likely NOT start.\nTo process further, we assume that cyberd node is synced on your machine and there were no validators created previously on that particular node. Also, you should have an imported account to cyberdcli that has enough bandwidth and EUL to start validator.\nWe also assume that the Ledger device is connected, unlocked and has the Tendermint app open.\nOne last thing: tmkms should be launched under a different console session on the same machine.\nRun Validator TO DO\nMaintenance of validator TO DO\n"
    },
    {
        "uri": "/docs/js-amino/changelog/",
        "title": "",
        "description": "",
        "content": " Change Log Unreleased Closed issues:\n The instance.constructor.name cannot get correct result, when I use babel-loader transformed. #47 Question: Cosmos SDK types library #41 Encoding of default values #27 Converting type to typ3 with considering options. #24 Typo on field options #23 webpack babel package error #17 publish to npm #16 Add options for encode/decode Like Go-Amino #14 Encoding int32, int64 to signed varint? #9 Bug when encoding byte slice #8 Can I create slice of interface? #7 How to create slice of structs? #6 Is this repo maintained? #5 Need to provide unit test #3 Support encode and decode with int32,int64,int16 - The same feature for unsigned integer #2 Add examples #1  Merged pull requests:\n Fixed typo in variable name #45 (jordansexton) FieldOtions -\u0026gt; FieldOptions #43 (jordansexton) Rename comos_base_account.js to cosmos_base_account.js #42 (jordansexton) 30 add ci components for release #40 (SaveTheAles) 30 add ci components for release #39 (SaveTheAles) docs for first major release #38 (litvintech) docs: add ethanfrey as a contributor #37 (allcontributors[bot]) docs: add cyberadmin as a contributor #36 (allcontributors[bot]) docs: add litvintech as a contributor #35 (allcontributors[bot]) docs: add SaveTheAles as a contributor #34 (allcontributors[bot]) docs: add philipstanislaus as a contributor #33 (allcontributors[bot]) docs: add TanNgocDo as a contributor #32 (allcontributors[bot]) docs: add Thunnini as a contributor #31 (allcontributors[bot]) Fixed default encoding #28 (litvintech) Add test interface array #26 (Thunnini) Fix encoding int32, 64 to binFixed #25 (Thunnini) Support test for simple struct #22 (Thunnini) Initial support testing #20 (Thunnini) add int16 encoding #19 (Thunnini) Add documentation, fix broken examples #18 (philipstanislaus) Experimentally support json encoding/decoding #13 (Thunnini) Add support to encode, decode utf8 #12 (Thunnini)  * This Change Log was automatically generated by github_changelog_generator\n"
    },
    {
        "uri": "/docs/js-amino/contributing/",
        "title": "",
        "description": "",
        "content": " Contributing to js-amino Thank you for considering a contribution to js-amino! This guide explains how to: * Get started * Development workflow * Get help if you encounter trouble\nGet in touch Before starting to work on a feature or a fix, please open an issue to discuss the use case or bug with us. This can save both you and us a lot of time. For any non-trivial change, we\u0026rsquo;ll ask you to create a short design document explaining:\n Why is this change done? What\u0026rsquo;s the use case? What test cases should it have? What could go wrong? How will it roughly be implemented? (We\u0026rsquo;ll happily provide code pointers to save you time)  Development Workflow Fork repo Fork repo to your account to continue work there.\nCreating Commits And Writing Commit Messages The commit messages that accompany your code changes are an important piece of documentation, please follow these guidelines when writing commit messages:\n Keep commits discrete: avoid including multiple unrelated changes in a single commit Keep commits self-contained: avoid spreading a single change across multiple commits. A single commit should make sense in isolation Include GitHub issue in the commit message on a first line at the beginning. Example:  #123 Refactor CONTRIBUTING.md --Add Creating Commits And Writing Commit Messages Section  Submitting Your Change After you submit your pull request, a core developer will review it. It is normal that this takes several iterations, so don\u0026rsquo;t get discouraged by change requests. They ensure the high quality that we all enjoy.\nGetting Help If you run into any trouble, please reach out to us on the issue you are working on.\nOur Thanks We deeply appreciate your effort toward improving js-amino. For any contribution, large or small, you will be immortalized in the release notes for the version you\u0026rsquo;ve contributed to.\n"
    },
    {
        "uri": "/docs/js-amino/overview/",
        "title": "",
        "description": "",
        "content": "   An Implementation of Amino for clients with Javascript Current state: 1.0.0 First major public release \n\nFor more information spec, please refer: https://github.com/tendermint/go-amino\nFeatures:  Encode and Decode simple types: ints 8/16/32/64, booleans, strings, bytes Encode and Decode recursive Structs and Interfaces, Arrays Encode simple Time data  Install From NPM: Run npm i js-amino\nInstall From Source  Run npm install  Running The Examples  cd src/examples go get Run examples, e. g. in Go: go run string.go and in JS node string.js  Running The Unit Test  Run npm test  Usage (MsgMultiSend example) const { Codec, FieldOptions, TypeFactory, Utils, Types, WireTypes, } = require('../index'); let StdTx = TypeFactory.create('StdTx', [{ name: 'msg', type: Types.ArrayInterface, }, { name: 'fee', type: Types.Struct, }, { name: 'signatures', type: Types.ArrayStruct, }, { name: 'memo', type: Types.String, }, ]); let MsgMultiSend = TypeFactory.create('MsgMultiSend', [{ name: \u0026quot;inputs\u0026quot;, type: Types.ArrayStruct }, { name: \u0026quot;outputs\u0026quot;, type: Types.ArrayStruct } ]); let Coin = TypeFactory.create('coin', [{ name: 'denom', type: Types.String, }, { name: 'amount', type: Types.String, } ]); let Input = TypeFactory.create('input', [{ name: 'address', type: Types.String, }, { name: 'coins', type: Types.ArrayStruct, } ]); let Output = TypeFactory.create('output', [{ name: 'address', type: Types.String, }, { name: 'coins', type: Types.ArrayStruct, } ]); let Fee = TypeFactory.create('fee', [{ name: 'amount', type: Types.ArrayStruct, }, { name: 'gas', type: Types.Int64, } ]); let PubKeySecp256k1 = TypeFactory.create('PubKeySecp256k1', [{ name: 's', type: Types.ByteSlice, }], Types.ByteSlice) let Signature = TypeFactory.create('signature', [{ name: 'pub_key', type: Types.Interface, }, { name: 'signature', type: Types.ByteSlice, } ]) let codec = new Codec(); codec.registerConcrete(new StdTx(), 'auth/StdTx', {}); codec.registerConcrete(new MsgMultiSend(), 'cosmos-sdk/MsgMultiSend', {}); codec.registerConcrete(new PubKeySecp256k1(), 'tendermint/PubKeySecp256k1', {}); let coin = new Coin('cyb', \u0026quot;10000\u0026quot;); let addressFrom = [ 59,58,243,13,132,163,164,202,233,7,236,93,136,166,181,175,236,69,48,186 ] let addressTo = [ 94,222,114,42,196,107,51,203,139,142,219,243,137,60,54,250,139,153,46,168 ] let input = new Input(addressFrom, [coin]); let output = new Output(addressTo, [coin]); let sendMultiMsg = new MsgMultiSend([input], [output]); let fee = new Fee([new Coin('cyb', '0')], 200000); let pubKey = new PubKeySecp256k1([2,27,24,0,255,96,147,21,64,29,132,192,108,219,59,134,206,201,126,224,63,160,24,236,170,124,164,95,43,180,6,246,250]); let signature = [165,76,109,61,53,129,190,147,52,224,34,106,235,208,224,36,190,25,204,36,226,129,97,109,35,130,217,228,144,106,10,134,14,183,95,252,219,235,22,92,37,53,3,89,111,173,12,158,146,71,82,113,236,241,170,121,217,20,236,23,131,35,80,29]; let sig = new Signature(pubKey, signature); let stdTx = new StdTx([sendMultiMsg], fee, [sig], 'elonmusk'); let jsonTx = codec.marshalJson(stdTx); let decodedDataTx = new StdTx(); console.log(\u0026quot;Binary stdTx:\\n\u0026quot;, (codec.marshalBinary(stdTx)).toString()); console.log(\u0026quot;Json:\\n\u0026quot;, jsonTx); codec.unMarshalBinary(codec.marshalBinary(stdTx), decodedDataTx); console.log(\u0026quot;Decoded data:\\n\u0026quot;, decodedDataTx.JsObject());  Binary stdTx: 220,1,240,98,93,238,10,80,194,104,154,209,10,36,10,20,59,58,243,13,132,163,164,202,233,7,236,93,136,166,181,175,236,69,48,186,18,12,10,3,99,121,98,18,5,49,48,48,48,48,18,36,10,20,94,222,114,42,196,107,51,203,139,142,219,243,137,60,54,250,139,153,46,168,18,12,10,3,99,121,98,18,5,49,48,48,48,48,18,14,10,8,10,3,99,121,98,18,1,48,16,192,154,12,26,106,10,38,235,90,233,135,33,2,27,24,0,255,96,147,21,64,29,132,192,108,219,59,134,206,201,126,224,63,160,24,236,170,124,164,95,43,180,6,246,250,18,64,165,76,109,61,53,129,190,147,52,224,34,106,235,208,224,36,190,25,204,36,226,129,97,109,35,130,217,228,144,106,10,134,14,183,95,252,219,235,22,92,37,53,3,89,111,173,12,158,146,71,82,113,236,241,170,121,217,20,236,23,131,35,80,29,34,8,101,108,111,110,109,117,115,107 Json: {\u0026quot;type\u0026quot;:\u0026quot;auth/StdTx\u0026quot;,\u0026quot;value\u0026quot;:{\u0026quot;msg\u0026quot;:[{\u0026quot;type\u0026quot;:\u0026quot;cosmos-sdk/MsgMultiSend\u0026quot;,\u0026quot;value\u0026quot;:{\u0026quot;inputs\u0026quot;:[{\u0026quot;address\u0026quot;:[59,58,243,13,132,163,164,202,233,7,236,93,136,166,181,175,236,69,48,186],\u0026quot;coins\u0026quot;:[{\u0026quot;denom\u0026quot;:\u0026quot;cyb\u0026quot;,\u0026quot;amount\u0026quot;:\u0026quot;10000\u0026quot;}]}],\u0026quot;outputs\u0026quot;:[{\u0026quot;address\u0026quot;:[94,222,114,42,196,107,51,203,139,142,219,243,137,60,54,250,139,153,46,168],\u0026quot;coins\u0026quot;:[{\u0026quot;denom\u0026quot;:\u0026quot;cyb\u0026quot;,\u0026quot;amount\u0026quot;:\u0026quot;10000\u0026quot;}]}]}}],\u0026quot;fee\u0026quot;:{\u0026quot;amount\u0026quot;:[{\u0026quot;denom\u0026quot;:\u0026quot;cyb\u0026quot;,\u0026quot;amount\u0026quot;:\u0026quot;0\u0026quot;}],\u0026quot;gas\u0026quot;:\u0026quot;200000\u0026quot;},\u0026quot;signatures\u0026quot;:[{\u0026quot;pub_key\u0026quot;:{\u0026quot;type\u0026quot;:\u0026quot;tendermint/PubKeySecp256k1\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;AhsYAP9gkxVAHYTAbNs7hs7JfuA/oBjsqnykXyu0Bvb6\u0026quot;},\u0026quot;signature\u0026quot;:\u0026quot;pUxtPTWBvpM04CJq69DgJL4ZzCTigWFtI4LZ5JBqCoYOt1/82+sWXCU1A1lvrQyekkdScezxqnnZFOwXgyNQHQ==\u0026quot;}],\u0026quot;memo\u0026quot;:\u0026quot;elonmusk\u0026quot;}} Decoded data: { msg: [ { inputs: [Array], outputs: [Array] } ], fee: { amount: [ [Object] ], gas: 200000 }, signatures: [ { pub_key: [Array], signature: [Array] } ], memo: 'elonmusk' }  Contributing Guide Contribution are welcome! Please read this guide before contributing.\nThis project follows the all-contributors specification. Contributions of any kind welcome!\nLicense Code are licensed under MIT license by contributors\n"
    },
    {
        "uri": "/docs/js-cosmos/changelog/",
        "title": "",
        "description": "",
        "content": " Change Log Unreleased Closed issues:\n Prepare 1.0.0 release of js-cosmos #4 Structure development of cosmos-js lib #2 Create Crypto Module #1  Merged pull requests:\n Fix contributors places #16 (Jonybang) improve package.json #15 (Jonybang) docs: add SaveTheAles as a contributor #13 (allcontributors[bot]) docs: add TanNgocDo as a contributor #12 (allcontributors[bot]) docs: add litvintech as a contributor #11 (allcontributors[bot]) docs: add Jonybang as a contributor #7 (allcontributors[bot]) #4 prepare 1.0.0 release #6 (SaveTheAles) Rework constants #5 (Jonybang) Cosmos builder #3 (Jonybang)  * This Change Log was automatically generated by github_changelog_generator\n"
    },
    {
        "uri": "/docs/js-cosmos/contributing/",
        "title": "",
        "description": "",
        "content": " Contributing to js-cosmos Thank you for considering a contribution to js-cosmos! This guide explains how to: * Get started * Development workflow * Get help if you encounter trouble\nGet in touch Before starting to work on a feature or a fix, please open an issue to discuss the use case or bug with us. This can save both you and us a lot of time. For any non-trivial change, we\u0026rsquo;ll ask you to create a short design document explaining:\n Why is this change done? What\u0026rsquo;s the use case? What test cases should it have? What could go wrong? How will it roughly be implemented? (We\u0026rsquo;ll happily provide code pointers to save you time)  Development Workflow Fork repo Fork repo to your account to continue work there.\nCreating Commits And Writing Commit Messages The commit messages that accompany your code changes are an important piece of documentation, please follow these guidelines when writing commit messages:\n Keep commits discrete: avoid including multiple unrelated changes in a single commit Keep commits self-contained: avoid spreading a single change across multiple commits. A single commit should make sense in isolation Include GitHub issue in the commit message on a first line at the beginning. Example:  #123 Refactor CONTRIBUTING.md --Add Creating Commits And Writing Commit Messages Section  Submitting Your Change After you submit your pull request, a core developer will review it. It is normal that this takes several iterations, so don\u0026rsquo;t get discouraged by change requests. They ensure the high quality that we all enjoy.\nGetting Help If you run into any trouble, please reach out to us on the issue you are working on.\nOur Thanks We deeply appreciate your effort toward improving js-cosmos. For any contribution, large or small, you will be immortalized in the release notes for the version you\u0026rsquo;ve contributed to.\n"
    },
    {
        "uri": "/docs/js-cosmos/overview/",
        "title": "",
        "description": "",
        "content": " Install npm install js-cosmos --save  RPC server calling Usage example for Cosmos-sdk RPC import CosmosSdkRpc from 'cosmos-js/dist/rpc/cosmosSdkRpc'; const constants = require('cosmos-js/dist/constants/cosmos'); const cosmosRpc = new CosmosSdkRpc('https://lcd-do-not-abuse.cosmostation.io', constants); const fromAddress = 'cosmos1adfp4t779mz5mqkp774l4d0umm2x9v4s42prxw'; const fromPrivateKey = 'a5b1305ebf29997a8a180b8bf322bc27b226e8cd00e243887e2129839c36bb2d'; const toAddress = 'cosmos14mgwf74me9jneaj7pxna873ufrqdwzes2vt4kl'; const amount = 1; cosmosRpc .transfer( { address: fromAddress, privateKey: fromPrivateKey, }, toAddress, amount ) .then(res =\u0026gt; { console.log('res', res); })  Usage example for CyberD RPC import CyberDRpc from 'cosmos-js/dist/rpc/cyberdRpc'; const constants = require('cosmos-js/dist/constants/cyberd'); const cyberdRpc = new CyberDRpc('http://93.125.26.210:34657', constants); const fromAddress = 'cyber1adfp4t779mz5mqkp774l4d0umm2x9v4sjpxt05'; const fromPrivateKey = 'a5b1305ebf29997a8a180b8bf322bc27b226e8cd00e243887e2129839c36bb2d'; const toAddress = 'cyber14mgwf74me9jneaj7pxna873ufrqdwzesd8val9'; const amount = 1; cyberdRpc .transfer( { address: fromAddress, privateKey: fromPrivateKey, }, toAddress, amount ) .then(res =\u0026gt; { console.log('res', res); });  Custom builder definition You might need use cosmos-sdk builder but with some custom RPC methods or with changes in transaction structure.\nIn this case - better to define your own builder that extends some exist builder like CosmosSdkBuilder.\nFor creating custom request - need to define js-amino type first of your custom message:\nconst { TypeFactory, Types } = require('js-amino'); const CustomMessage = TypeFactory.create('CustomMessage', [ { name: 'custom_address', type: Types.String, }, { name: 'custom_amount', type: Types.String, }, ]);  Then - you can use this CustomMessage for build custom request.\nimport CosmosSdkBuilder from 'cosmos-js/dist/builders/cosmosSdkBuilder'; import CosmosCodec from 'cosmos-js/dist/codec'; class MyCustomChainBuilder extends CosmosSdkBuilder { constructor() { super(); // redefine codec for clear parent types and use only new types if you need this.codec = new CosmosCodec(); this.codec.registerConcrete(new CustomMessage(), 'my-custom-chain/custom-message', {}); } myCustomRequest(sendOptions) { const msg = new CustomMessage(sendOptions.customAddress, sendOptions.customAmount); return this.abstractRequest(sendOptions, msg); } }  Then - you can build your request manually:\nconst requestData = { account: { address: keyPair.address, publicKey: keyPair.publicKey, privateKey: keyPair.privateKey, accountNumber: 0, sequence: 0, }, chainId: 'euler-4', customAddress: 'my-custom-address', customAmount: '999', fee: { denom: '', amount: '0', }, memo: '' }; const customChainBuilder = new MyCustomChainBuilder(); const txRequest = customChainBuilder.myCustomRequest(requestData); console.log('you can send result json to server:', txRequest.json); console.log('or you can send result hex to server:', txRequest.hex);  Its already signed tx and converted to suitable for RPC server format.\nIf your RPC server takes non-standart data structures in Fee or Signature - you can redefine sendRequest, getResultTx, getFee, getSignature, getSignature, signMessageJson methods for write specific logic or data structure.\nBy this way - all your custom transactions will follow the same specific rules that defined in these methods.\nYou can see the example in cyberDBuilder.js.\nCustom RPC definition For definition method for sending your custom transaction to rpc server - you can create custom rpc class:\nimport CosmosSdkRpc from 'cosmos-js/dist/rpc/cosmosSdkRpc'; class MyCustomChainRpc extends CosmosSdkRpc { constructor(rpc, constants) { super(rpc, constants); this.cosmosBuilder = new MyCustomChainBuilder(); } async executeCustomRequest(txOptions, customAddress, customAmount) { const options = await this.prepareOptions(txOptions, { // for using inside myCustomRequest customAddress, customAmount, // you can also redefine fee for example fee: { denom: 'uatom', amount: '500', } }); // calling previously defined myCustomRequest const txRequest = this.cosmosBuilder.myCustomRequest(options); // sending to server return this.handleResponse(axios.post(`${this.rpc}/txs`, { tx: JSON.parse(txRequest.json), mode: 'sync', })); } }  Then use MyCustomChainRpc like this:\nconst myCustomChainRpc = new MyCustomChainRpc('http://rpc.server', new NetConfig('customprefix', 'custompubprefix')); myCustomChainRpc.executeCustomRequest( {privateKey: 'a5b1305ebf29997a8a180b8bf322bc27b226e8cd00e243887e2129839c36bb2d'}, 'my-custom-address', '999' ).then(res =\u0026gt; { console.log('res', res); });  "
    }]
    